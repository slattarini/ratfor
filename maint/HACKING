HACKING file for Public Domain Ratfor.
This file attempts to describe the rules to use when hacking it.


Bootstrap
---------

  To bootstrap checked-out sources, just run
    $ autoreconf -vi
  from the top directory. Note that to do this you'll need to have
  installed the latest version of autoconf (2.64) and automake (1.11).


Recording changes
-----------------

 * Add an adequate and clear comment for every check-in.
 * Changes other than minor bug fixes must be mentioned in NEWS.
 * Important bug fixings must be mentioned in NEWS, too.
 * If you do a change that add some obscure code for a good reason,
   please comment the code carefully and explicitly describe the resason
   that led you to write it.
 * We do not use a ChangeLog file.


C Coding Style
--------------

  Mostly K&R style.

  For variables: do not use CamelCase or mixedCase, but use only
  names_with_undercores.

  Constants defined with `enum' or with `#define' must be written in
  UPPERCASE.  Macros defined with `#define' should be written in UPPERCASE,
  *unless* keeping them lowercase can make the code clearer.

  Do not use typedefs (apart the already exising typedef `bool' for
  booleans): it's better know the real type of what is being declared
  and used, even if that means a bit more typing.

  Do not write function definitions like this:
    ...
    int foo(void) {
       ... /* function body here */
    }
    ...
    char* bar(char c, char s[], int n)
    {
       ... /* function body here */
    }
    ...
  Intead use:
    ...
    int
    foo(void)
    {
       ... /* function body here */
    }
    ...
    char *
    bar(char c, char s[], int n)
    {
       ... /* function body here */
    }
    ...
  This greatly increases greppability of C source files.

  For header files: protect from multiple inclusions with the idiom
  (assuming a `foo.h' header file):
    #ifndef RAT4_FOO_H
    #  define RAT4_FOO_H 1
    ... /* content of header file here */
    #endif /* RAT4_FOO_H */


C++ Compatibility
-----------------

 Ratfor must compile even under a C++ compiler.  In particular, this means
 that:
   - C++ reserved keywords, like `and', `or', `private' or `public' cannot
     be used.
   - Global variables and non-static functions must be explicitly marked
     as `extern "C"' when compiling with a C++ compiler; this can be
     accomplished using the macros `BEGIN_C_DECLS', `END_C_DECLS' and
     `C_DECL', defined in <config.h>.
   - Since the C++ compilers are stricter in type checking, the return
     value of malloc must always cast explicitly; e.g. this does not work:
       char *p = malloc(STRING_SIZE); /* WRONG */
     and this must be used instead:
       char *p = (char *) malloc(STRING_SIZE); /* GOOD */


Testsuite
---------

  Can be run with `make check'.  For more details, refer to file
  `tests/README'.


Fixing bugs
-----------

  The correct response to most actual bugs is to write a new test case
  which demonstrates the bug.  Then fix the bug, re-run the test suite,
  and check everything in.


Make a release
--------------

  TODO


Miscellaneous
-------------

  * Do not checkin generated files like configure or the various
    Makefile.in
  * Do not use $Id$ lines, which create more problems than they solve.
    In fact, when a file with $Id$ lines and "ident" git attribute is
    (locally) committed, its $Id$ line is *not* updated with the new
    commit's SHA-1 id; thus, a "make dist" can easily create a tarball
    including files with *wrong* $Id$ line -- which is far, far worse
    than having no $Id$ line at all.

