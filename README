                           The Ratfor Testsuite


Brief Description
-----------------

  This package contains a set of blackbox testcases for the ratfor
  preprocessor.  It is an independent package, not tailored to a particular
  ratfor implementation.

  It can be used to check that ratfor implementations has "standardized"
  behaviour (where the "standardized" is to be interpreted as "passes all
  the tests defined in the Ratfor Testsuite").

  This package is used in particular as the testsuite of C Ratfor (a ratfor
  proprocessor written in C and whose implementation is loosely inspired to
  the original Ratfor implementation by Kernighan & Plaugher).


Configuration process
---------------------

  The Ratfor Testuite ships with a customary autoconf-generated `configure'
  script, which scans the system looking for prerequisites needed to run
  the testsuite.  Especially important are its searches for a ratfor
  preprocessor and a fortran compiler, and the way in which the user can
  override or preset the results of these searches.  These and other
  aspects are described in more details in the rest of the file.


(No) Installation
-----------------

  The "Ratfot Testsuite" is not meant to be installed.

  It can be used directly from its own tree to check an installed version
  of the ratfor properocessor.

  Alternatively, it can be embedded in the distribution of a third-party
  ratfor processor to work as its testsuite, or at least as a part of its
  testsuite (see the following section "Ratfor preprocessor" for more
  details about this possibility).


Ratfor preprocessor
-------------------

  By default, configure scans your system to found an available ratfor
  preprocessor, but this can be overridden by passing it a proper value
  for the variable `RATFOR', as in:

    ./configure RATFOR=/opt/bin/ratfor

  Note that, obviously, a ratfor proprocessor is a necessary preprequisite
  to run the ratfor testsuite, and thus configure aborts if it fails to
  find one.

  More importantly, `RATFOR' is a "configure precious variable", so that
  it can be passed to configure as an environment variable without creating
  subtle problems:

    export RATFOR=$HOME/bin/my-ratfor; ./configure

  This might not be particularly useful to individual usesr, but is *very*
  useful for a package providing a ratfor implementation and using the
  present "Ratfor Testsuite" package as a subpackage implementing a
  black-box testsuite.

  For example, the configure script of such a package can:

   1. set the $RATFOR shell variable to the absolute path of the ratfor
      preprocessor it provides;
   2. export this varible in the environment;
   3. recursively call the configure script of the "Ratfor Testsuite"
      subpackage, which will then read the path of the ratfor preprocessor
      from the $RATFOR variable passed in the environment (this recursive
      call is supported almost "out fo the box" if the top-level configure
      script is generated by autoconf).

  After that, the "Ratfor Testsuite" supbackage will be configured to use
  the ratfor preprocessor provided by the top-level package.

  The strategy just described is exactly the one that was employed in
  older versions of the "C Ratfor" package; for clarity, an excerpt from
  and older version its `configure.ac' file is presented (note that the
  "C Ratfor" package keeps the "Ratfor Testsuite" subpackage in the
  `blackbox-tests' subdirectory):

    ...
    AC_INIT([C Ratfor], ...)
    ...
    # the testsuite is kept in a separate subpackage.
    AC_CONFIG_SUBDIRS([blackbox-tests])
    # Since `RATFOR' is declared in `blackbox-tests/configure.ac' as a
    # precious variable, this will pass the proper value of $RATFOR to
    # the recusrively invoked script `blackbox-tests/configure'.
    # NOTE: when the configure script is running, the current working
    # directory (returned by `pwd') is the build directory.
    RATFOR=`pwd`/src/ratfor; export RATFOR
    AC_MSG_NOTICE([exported RATFOR='$RATFOR'])
    ...


Fortran 77 Compiler
-------------------

  Some tests require a Fortran 77 compiler.  If it is not present, they
  should be automatically skipped.

  By default, configure scans your system to found an available compiler,
  but this can be overridden by passing it a proper value for the variable
  `F77', as in:

    ./configure F77=/usr/local/gnu/bin/g77

  A special value of `NONE' for `F77' will explicitly tell configure that
  you don't have any avaiable Fortran 77 compiler.  All the tests requiring
  such a compiler will be skipped.


Expected failures
-----------------

  It can sometimes happen that a particular implementation of ratfor has
  known unfixed bugs or limitations, which can cause some test cases of
  the Ratfor Testsuite to fail.  These failures are expected, and should
  not be flagged as real failures by the testsuite driver: the associated
  tests are said to be "xfailing" (XFAIL: eXpected FAILure).

  Thus, if you know that your ratfor program has known issues causing some
  tests, say `foo.test' and `bar.test', to fail, you can avoid spurious
  failures' reports by explicitly flaggin these tests as "xfailing" at
  configure time, using the configure variable `RAT4_TESTUITE_XFAIL_TESTS':

    ./configure RAT4_TESTUITE_XFAIL_TESTS='foo bar'

  It's important to note that `RAT4_TESTUITE_XFAIL_TESTS' is a "configure
  precious variable", and as such it can be passed to configure as an
  environment variable without creating subtle problems:

    export RAT4_TESTUITE_XFAIL_TESTS='foo bar'; ./configure

  This might not be particularly useful to individual usesr, but is *very*
  useful for a package providing a ratfor implementation and using the
  present "Ratfor Testsuite" package as a subpackage implementing a
  black-box testsuite.  Considerations similar to those given in the
  section "Ratfor preprocessor" above apply here.


Running all tests
-----------------

  The command:

    make check

  should run all the ratfor testcases, also building in advance any
  auxiliary script or binary required by the test scripts.

  The test cases are run in series by default.  You can use the `-j N'
  option of make for faster completion (roughly, this runs up to N test
  cases simultaneously, in parallel).  An example:

    make -j 5 check


Interpretation
--------------

  Successes:
    PASS  - success
    XFAIL - expected failure

  Failures:
    FAIL  - failure
    XPASS - unexpected success

  Other:
    SKIP  - skipped tests (third party tools not available)


Getting details from failures
-----------------------------

  Each test is a shell script, and by default is run by $CONFIG_SHELL
  (which should be the best shell found at configure time).
  By default, verbose output of a test `foo.test' is retained in the log
  file `foo.log'.  A summary log is created in the file `test-suite.log'.

  In a non-VPATH build you can also run test scripts directly (with the
  current directory being necessarly the the `tests/' subdirectory), they
  will be verbose and no log file will be written.

  You can limit the set of files using the TESTS variable, and enable
  detailed test output at the end of the test run with the VERBOSE
  variable:

    make VERBOSE=yes TESTS='first.test second.test ...' check

  The above command works only if you are in the `tests/' subdirectory;
  if you want to do something similar while in the top directory, you'll
  have to resort to e.g.

    env VERBOSE=yes TESTS='first.test second.test ...' make -e check

  But remember that `make -e' can be evil, since it could pull too many
  things in the makefile's namespace.  You've been warned.


Supported shells
----------------

  The test scripts are written with portability in mind, so that they
  should run with any decent Bourne-compatible shell.

  However, some care must be used with Zsh, since, when not directly
  starting in Bourne-compatibility mode, it has some incompatibilities
  in the handling of `$0' which conflict with our usage.  Our testsuite
  can automatically work around these incompatibilities when a version
  4.x or later of Zsh is used, but unfortunately not when an older (3.x)
  version of Zsh is used.  Thus, if you want to run a test script, say
  foo.test, with Zsh 3.x, you *can't* simply do `zsh foo.test', but you
  *must* resort to:
    zsh -o no_function_argzero foo.test

  Note that this problem does not occur if Zsh is executed through a
  symlink with a basename of `sh', since in that case it starts
  in Bourne compatibility mode.  So you should be perfectly safe when
  /bin/sh is zsh, even a it's only a 3.x version.


Preserving temporary files
--------------------------

  By default, every test case `foo.test' create a temporary directory
  named `foo.dir', and remove it on sucessfull termination.
  Use `keep_testdirs=yes' to keep test directories for successful tests
  also.


Reporting failures
------------------

  Send verbose output, i.e., the contents of test-suite.log, of failing
  tests to <stefano.lattarini@gmail.com>, along with the usual version
  numbers (which ratfor, which C compiler, which fortran compiler, which
  operating system, which make utility and version, which shell, etc.).
  Also report any other information which you think might be useful.

