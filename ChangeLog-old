2009-11-13  Stefano Lattarini  <stefano.lattarini@gmail.com>

	version bumped: 1.0m => 1.0n

	M: NEWS:
	  * cite new version `1.0n'

2009-11-13  Stefano Lattarini  <stefano.lattarini@gmail.com>

	maint.mk: autoreconf is called with `-vi' by default

	M: maint/maint.mk:
	  * updated with latest version from SteLib, which, when defining
	    `$(_autoreconf)', uses as its default value (used when the
	    `AUTORECONF' environment variable is not set) `autoreconf -vi'
	    rather than simply `autoreconf'

2009-11-13  Stefano Lattarini  <stefano.lattarini@gmail.com>

	rename installed binary from `ratfor' to `c-ratfor'

	M: src/Makefile.am:
	  * define $(bin_PROGRAMS) as `c-ratfor', not to `ratfor'
	  * use $(c_ratfor_SOURCES), not $(ratfor_SOURCES)
	  * use $(nodist_c_ratfor_SOURCES), not $(nodist_ratfor_SOURCES)

	M: configure.ac:
	  * updated accordingly: define $RATFOR for the testsuite as
	    "`pwd`/src/c-ratfor", not as "`pwd`/src/ratfor"

	M: src/.gitignore:
	  * updated accordingly: list `c-ratfor', not `ratfor'

	D: doc/ratfor.man:
	A: doc/c-ratfor.man:
	  * renamed accordingly

	M: src/Makefile.am:
	  * modified accordingly: define $(dist_man1_MANS) as `c-ratfor.man',
	    not to `ratfor.man'

	M: NEWS:
	  * updated accordingly

2009-11-13  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved heading comments in Makefile.am files

	M: doc/Makefile.am.
	M: src/Makefile.am:
	  * explicitly tell that these are makefiles of the C Ratfor
	    distribution
	  * other minor related improvements

2009-11-12  Stefano Lattarini  <stefano.lattarini@gmail.com>

	version of package depends on SHA1 of git commit

	A: build-aux/git-version-gen:
	  * new file, imported verbatim from gnulib; caclulate a suitable
	    version string for the current git commit (i.e. commit pointed
	    to by HEAD)

	M: configure.ac:
	  * calculate version for AC_INIT on-the-fly (at autoconf time) with
	    `git-version-gen'

	M: Makefile.am:
	  * added rules/hooks to distribute the file `.tarball-version' in
	    dist tarballs

	M: .gitignore:
	  * do not list whole `build-aux/', but only files in there different
	    from `git-version-gen'

	M: maint/release.mk:
	  * updated with a new version from SteLib, which corrected the
	    releasing process to account for version strings auto-generated
	    from Git commit's SHA1 (decreased automation, but extended checks)

	M: HACKING:
	  * section "Make a release": updated accordingly to the introduced
	    changes

2009-11-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Makefile.am: cosmetic reordering

	M: Makefile.am:
	  * definition of $(SUBDIRS) and $(dist_doc_data) moved up in the file

2009-11-10  Stefano Lattarini  <stefano.lattarini@gmail.com>

	configure.ac: remove uselss call to AC_PROG_FGREP

	M: MostlyCleanConfigureTmp.am
	  * updated to latest version from SteLib (do not require anymore $(FGREP)
	    to be defined)

	M: configure.ac:
	  * remove uselss call to AC_PROG_FGREP: it was needed to have $(FGREP)
	    defined in `MostlyCleanConfigureTmp.am', but latest version of this
	    file can work also without $(FGREP) being defined

2009-11-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	disable warns inappropriate for c++ when $CC is c++ compiler

	M: configure.ac:
	  * added a configure check to verify if $CC is a C++ compiler
	  * try to enable the following warnings only for non-C++ compilers, as
	    they are useless or unapplicable to C++ compilers
	     + -Wnested-externs
	     + -Wc++-compat
	     + -Wdeclaration-after-statement

2009-11-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	package renamed: Public Domain Ratfor => C Ratfor

	M: configure.ac:
	  * (AC_INIT): package name changed from `Public Domain Ratfor'
	    to `C Ratfor'

	M: HACKING:
	M: README:
	M: BUGS:
	M: NEWS:
	M: doc/ratfor.man
	   * updated accordingly

	M: Makefile.am:
	M: bootstrap.sh:
	M: maint/personal/stefano-lattarini.mk:
	M: src/main.c:
	M: xfail-tests.txt:
	  * comments updated accordingly

	M: .gitignore:
	  * name of dist tarball and distdir to ignore updated accordingly

	M: blackbox-tests:
	  * updated to commit `0d6f596015db888f8b266c356367990b52f1fb67',
	    which refers to "C Ratfor" rather than to "Public Domain Ratfor"

2009-11-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	typofix in BUGS

	M: BUGS:
	  * typofix: s/statment/statement/

2009-11-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	README: tiny fix

	M: README:
	  * fix in wording: s/public domain PD/public domain/

2009-11-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	do not recognize fortran operators as special tokens anymore

	M: src/tok-types.h:
	  * removed #define of constant `TOKT_OPERATOR'

	M: src/codegen.c:
	  * in function `token_requires_automatic_line_continuation()':
	     - do not do trigger line contination anymore on tokens of type
	       `TOKT_OPERATOR'
	     - trigger line contination on tokens `+', `-' and `='
	     - added an extensive and long explanation of why we don't attemp
	       line continuation on `*' and `/'

	M: src/tokenizer.c:
	  * get_non_alphanumeric_raw_token(): removed special handling of
	    tokens which could be Fortran operators
	  * get_operator_raw_token(): removed, no more needed
	  * convert_relational_shortand(): do not consider anymore an isolated
	    `=' as a "relational token"

	M: blackbox-tests:
	  * updated to commit `b65b65a5ef0eb5a24f539e44addb1edcdba4b377',
	    releaxing test for automatic line continuation and adding
	    tests checking that no improper line continuation is attempted
	    on `/' and `*' (e.g. ond `data' statement or common blocks)

2009-11-05  Stefano Lattarini  <stefano.lattarini@gmail.com>

	subprograms/return: improved handling and diagnostic

	M: src/tokenizer.c:
	  * get_token(): code to keep track of current function name moved
	    out to `eatup()' function in `codegen.c'
	  * removed global constant strings (no more needed):
	      - KEYWORD_FUNCTION[]
	      - KEYWORD_SUBROUTINE[]
	      - KEYWORD_END[]

	M: src/codegen.c:
	  * peek_subprog_name(): new internal (aka static) function
	  * stringyfy_subprog_type(): new internal (aka static) function
	  * new internal static strings:
	     - sfunction[]
	     - ssubroutine[]
	     - send[]
	  * eatup(): keep track of current function/subroutine names
	  * otherstmt(): related change: put back the current token before
	    eating up the rest of the line
	  * give a synerr if a function or subroutine is defined inside
	    another function or subroutine
	  * give a synerr if `return' is seen outside any function or
	    subroutine
	  * give a synerr if `return' inside a subroutine is given an
	    argument

	M: blackbox-tests:
	  * updated to commit `95d47f7c989267a3e6226c13a92540366dbe9522',
	    which added many tests on the `return' keyword and on subprograms
	    a.k.a. functions/subroutines

	M: NEWS:
	  * updated accordingly

	M: BUGS:
	  * do not report anymore that the `return' keyword used outside any
	    function defition is not flagged as an error: we've just fixed
	    this bug
	  * report a new bug, spotted thanks to the new tests imported: error
	    messages might be uncluder

	M: xfail-tests.txt:
	  * removed `balanced-parens.test': the test works now, thanks to the
	    changes to the function `otherstmt()' in file `codegen.c')
	  * add newly imported tests `function-name-invalid-3.test' and
	    `subroutine-name-invalid-3.test'

2009-11-04  Stefano Lattarini  <stefano.lattarini@gmail.com>

	stefano-lattarini.mk: tiny fixings in comments

	M: maint/personal/stefano-lattarini.mk:
	  * minor fixings in comments:
	     - s/reatfor/ratfor/
	     - s/ratfor testsuite/public domain ratfor/

2009-11-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added "TODO" comment in lex-symbols.h

	M: src/lex-symbols.h:
	  * added "TODO" comment about making the LEX* constants an enum, instead
	    of a list of #define'd constants

2009-11-04  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixed typo in `maint/config.site'

	M: maint/config.site:
	  * fixed typo: s/presen/present/

2009-11-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	keep track of subroutine names, not only function names

	M: src/tokenizer.c:
	  * new global constant string `KEYWORD_SUBROUTINE'
	  * new global constant string `KEYWORD_END'
	  * get_token(): keep track of current subroutine, not only current
	    function; also keep track of end of subroutines/functions
	  * get_subprog_name(): new subroutine, used by get_token() to keep
	    track of currernt function/subroutine name

	M: src/init.c:
	  * use `current_subprogram_name_name', not `current_function_name'
	  * initialize `current_subprogram_type' to `SBPR_NONE'

	M: src/codegen.c:
	  * retcode(): use `current_subprogram_name_name', not
	    `current_function_name'
	  * retcode(): added a "TODO" comment about the need to signal an
	    error if an argument is given to `return' in a subroutine

	M: src/rator-global.h:
	  * global variable `current_function_name' renamed as
	    `current_subprogram_name')
	  * new global variable `current_subprogram_type'

	M: src/rator-common.h:
	  * new enum `subprg_t'

2009-11-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	extended .gitignore

	M: src/.gitignore:
	  * added lexer.c-t (temporary file used in Makefile to build lexer.c)

2009-11-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	updated testsuite submodule

	M: blackbox-tests:
	  * updated to commit `f5dc214c7d2a87b77d5b4a006d5016594f430dd5'; the
	    majore changes are listed in the items below...
	  * the timer script does no more mess up with the standard input of
	    the program it has to run
	  * new shell function `run_RATFOR()'
	  * renamed shell function: `run_CMD()' => `run_command()'
	  * test scripts performing sanity checks are run before test scripts
	    testing ratfor
	  * sentinel variable in `tests/TestsAux/defs.in' (used to decide
	    wheter re-excute the test scripts with $CONFIG_SHELL) has been
	    given a better name:
	      - from: RAT4_TESTSUITE_RUNNING_WITH_CONFIG_SHELL
	      + to: RAT4_TESTSUITE_NO_REEXEC_WITH_CONFIG_SHELL

2009-10-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	HACKING: tell about 4-chars indentation

	M: HACKING:
	  * tell to use indentation of four characters

2009-10-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	HACKING: extend coding standards (use of curly brackets)

	M: HACKING:
	  * explain when it's ok or even recommended to use non-necessary curly
	    brackets, to improve readability

2009-10-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	parser.c: stylistic nitpick

	M: src/parser.c:
	  * in a if/elsif/else construct: stlystic change to better adhere to
	    our coding standards and improve readability

2009-10-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	parser.c: normalized indentation of switch statements

	M: src/parser.c:
	  * unstack(), parse(): normalized indentation of switch statements:
	    indent also the `case' labels

2009-10-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	parser.c: explicitly initialize global static variable, for clarity

	M: src/parser.c:
	  * explicitly initaize the global static variable `sp' to 0, for
	    clarity

2009-10-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring in tokenizer.c: function renaming

	M: src/tokenizer.c:
	  * function `convert_relation_shortand()' renamed as
	    `convert_relational_shortand()'

2009-10-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	ratfor.man: added warning for non-working feature

	M: doc/ratfor.man:
	  * added a warning telling that the described feature of "string
	    declarations" is currently unsupported

2009-10-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fix manpage w.r.t. chars acceptd in symbolic parameter names

	M: doc/ratfor.man:
	  * tell that the dollar char `$' is accepted in symbolic parameter
	    names
	  * tell that a symbolic parameter name can start also with an
	    underscore `_' or dollar `$' character, but not with a number

2009-10-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	dot `.' is no more considered an alphanumeric character

	M: src/rat4-common.h:
	  * is_rat4_alpha(): do not consider the dot `.' an alphanumeric
	    character anymore

	M: doc/ratfor.man:
	  * manual page updated accordingly

	M: blackbox-tests:
	  * updated to commit `7817172172cd58421def4e6df0f86b8cfdc51014',
	    introducing tests on dot, dollar and underscore characters
	    in names of symbolic parameters

	M: xfail-tests.txt:
	  * removed `define-underscores.test': it works now (and has a
	    different name too: `define-underscore-in-symbolic-name.test')

	M: NEWS:
	  * updated accordingly

2009-10-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	codegen.c: eatup(): removed crufty code

	M: src/codegen.c:
	  * eatup(): deleted code removing underscore characters before a
	    newline when doing automatic line continuation: this (and more)
	    is already done *for all input* by the `ngetch' function in io.c

2009-10-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tokenizer.c: fixed a couple of "XXX" comment

	M: src/tokenizer.c:
	  * get_operator_raw_token(), get_non_alphanumeric_raw_token(): in a
	    "XXX" comment about a to-be-done assertion abot `toksiz': tell that
	    must be `toksiz >= 3', not `toksiz >= 2'

2009-10-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	codegen.c: eatup(): added "TODO"/"XXX" comment

	M: src/codegen.c:
	  * eatup(): added an `XXX' comment asking if this function might be the
	    right place to deal with comments and verbatim text in a more rational
	    and/or systematic way

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	updated testsuite to commit `790631cf6262ad9be7dad9ae933e9885d953e442'

	M: blackbox-tests:
	  * updated from commit `41a9e57d2d75a0f94e4c377a7add51a39b0c4caa' to
	    commit `790631cf6262ad9be7dad9ae933e9885d953e442'; a summary of
	    introduced changes follows...
	  * improved/extended tests on the `return' keyword (also with new test
	    scripts)
	  * defs.in: shell function `run_CMD' rewritten, with some notable
	    semantic changes too
	  * defs.in: shell function `run_F77' adapted to changes in `run_CMD'
	  * added new test on handling of balanced parentheses
	  * added new test on simple variable assignements
	  * some minor nitpicking and bugfixings (should have no impact on us)

	M: xfail-tests.txt:
	  * removed `line-continuation-automatic.test': in has been splitted in
	    three or four tests (of which one still fails, see below)
	  * added new test `line-continuation-automatic-relationals-raw.test'
	  * added new test `balanced-parens.test'

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactor tokenizer.c (checks on tokens' lenght have been distributed)

	M: src/tokenizer.c:
	  * get_raw_token(): expect auxiliary `get_XXX_raw_token()' functions to
	    check by themselves that the token read fits in the provided buffer
	    string, and to append a proper null character to that buffer
	  * in the following functions:
	      - convert_relation_shortand()
	      - get_alphanumeric_raw_token()
	      - get_numerical_raw_token()
	      - get_quoted_string_raw_token()
	      - get_operator_raw_token()
	      - get_non_alphanumeric_raw_token()
	    the following changes:
	      - check that the token read does fit in the provided buffer string
	      - append a proper null char to the buffer string
	      - do not return the length of the token read anymore; instead, return
	        its type
	      - other related and unrelated fixings and refactorings

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixed description of function `integer_to_string()'

	M: src/tokenizer.c:
	  * fixed description of function `integer_to_string()': the previous
	    version of this description described a function converting strings
	    to integers, rather than the opposite!

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixed descrioption of function `string_to_integer()'

	M: src/codegen.c:
	  * fixed description of function `string_to_integer()': explicitly tell
	    that it doesn't support negative integers

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tokenizer.c: tiny improvement (signature of function)

	M: src/tokenizer.c:
	  * convert_relation_shortand(); now takes also a `toksiz' argument
	  * get_non_alphanumeric_raw_token() call to `convert_relation_shortand()'
	    modified accordingly

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactor tokenizer.c in code reading non-alphanumeric tokens

	M: src/tokenizer.c:
	  * get_non_alpanumeric_raw_token(): new function
	  * get_operator_raw_token(): new function
	  * get_other_nonlpha_raw_token(): function removed
	  * get_raw_token(): use new functions instead of the removed one; other
	    related changes and refactorings
	  * convert_relational_shorthands(): related small change (initialize
	    first char in token[] with re-read char from FILE *fp)

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactor: define token types in their own header file

	M: src/lex-symbols.h:
	  * removed definitions of `TOKT_*' constants

	A: src/tok-types.h:
	  * new header:  moved in definitions of `TOKT_*' constants

	M: src/tokenizer.h:
	  * include "tok-types.h"

	M: src/tokenizer.c:
	  * do not include `lex-types.h' anymore

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	lex-symbols.h: fix w.r.t. multiple inclusion protections

	M: src/lex-symbols.h:
	  * fix: use `RAT4_LEX_SYMBOLS_H', not `RAT4_LEX_H', as sentilnel macro
	    against mutiple header inclusion

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	introduce token types for operator anr relational symbols

	M: src/lex-types.h:
	  * removed token types `TOKT_OPEREXP' and `TOKT_OPERSTRCAT'
	  * new token types `TOKT_OPERATOR' and `TOKT_RELATN'

	M: src/tokenizer.c:
	  * get_raw_token(): returns `TOKT_OPERATOR' and `TOKT_RELATN' as token
	    type when the token read is resp. an operator (`+', `-', `=', `**',
	    ...) or resp. a relational symbol (`&&', `||', `==', `>', ...)
	  * get_other_nonlpha_raw_token(): modified (quite heaviliy) to provide
	    the new behaviour of `get_eaw_token()'
	  * can_char_be_composed(): removed, no more needed

	M: src/codegen.c:
	  * token_requires_automatic_line_continuation(): updated accordingly: do
	    line continuation only for token types `COMMA', `TOKT_OPEREXPR' and
	    `TOKT_RELATN'
	  * caslab(): updated accordingly: do not expect the return status of
	    `get_token()' to be e.g. MINUS or PLUS

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	write our own version of isdigit(), isalpha(), etc.

	A: src/rat4-common.h:
	  * Added inline functions:
	     - is_strict_alpha()
	     - is_strict_alnum()
	     - is_rat4_alpha()
	     - is_rat4_alnum()
	     - is_digit()
	     - is_upper()
	     - is_lower()
	    They are used to replace `isalpha()', `isdigit()' etc. macros, which
	    can be dependent from the locale (and this is contrary to our usage).

	M: src/tokenizer.c:
	  * do not include header <ctype.h> anymore
	  * use new function defined in rat4-common.h

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tiny refactoring: renaming of a token type

	M: src/lex-types.h:
	M: src/tokenizer.c:
	M: src/codegen.c:
	M: src/mklexer.sh:
	  * renamed token type: TOKT_DIGIT => TOKT_DIGITS

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: tokenizer.c: remove char_type() function

	M: src/tokenizer.c:
	  * removed function `char_type()' (not widely used, and its usage/meaning
	    was confusing); related changes

	M: src/lex-types.h:
	  * change related to the one in tokenizer.c: removed now unused constant
	    `TOKT_LETTER'

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: token types renamed with TOKT_ prefix

	M: src/lex-types.h:
	  * token types renamed with `TOKT_' prefix

	M: src/tokenizer.c:
	M: src/codegen.c:
	M: src/mklexer.sh:
	  * updated accordingly

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring in tokenizer.c (new function)

	M: src/tokenizer.c:
	  * get_other_nonalpha_raw_token(): new function
	  * get_raw_token(): use new function `get_other_nonalpha_raw_token'
	    rather than inlined code in reading non-alphanumeric tokens

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fix in tokenizer.c: code to read name of included file strengthened

	M: src/tokenizer.c:
	  * get_token(): when processing `include' directives: check that the
	    lenght of the path (of the file to be included) does not exceed the
	    lenght of the buffer string used to memorize it

2009-10-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring in tokenizer.c: getdef(): no ngetch() is used anymore

	M: src/tokenizer.c:
	  * getdef(): do not use `ngetch()' anymore to read the definition, but
	    pass through `get_raw_token()' (require some non-trivial changes)

2009-10-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactor tokenizer.c (help catch programming errors)

	M src/tokenizer.c:
	  * get_raw_token(): do not unconditionally initialize `toklen' anymore,
	    to help catching programming errors due to forgotten updating of the
	    value of `toklen' (this already happened in practice)

2009-10-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	nitpick: use `SSTRLEN', not `(int) strlen'

	M: src/tokenizer.c:
	  * in function `integer_to_string': use `SSTRLEN' rather than
	    `(inst) strlen', for modularity and better consistency with
	    the rest of code

2009-10-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix: do not truncate tokens `//' and `**'

	M: src/tokenizer.c:
	  * get_raw_token(): fixed NASTY BUG: do not trunacate anymore the `//' and
	    `**' to their first character; this is done by ptoperly incrementing the
	    `toklen' variable

	M: blackbox-tests:
	  * updated to commit `41a9e57d2d75a0f94e4c377a7add51a39b0c4caa', which
	    adds a proper test case (`non-alpha-tokens-2.test') exposing the
	    just-corrected bug

2009-10-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	clean for configure tmpfiles: import from stelib

	A: MostlyCleanConfigureTmp.am:
	  * new file, imported from SteLib; contains the definition of the
	    `mostlyclean-tmp' target, used to clean temporary files erroneously
	    left behind by configure and/or config.status when run with Zsh 3.

	M: Makefile.am:
	  * do not define the target `mostlyclean-local': it's defined (with
	    the new name `mostlyclean-configure-tmp', and with some semantic
	    changes) in new file `MostlyCleanConfigureTmp.am'
	  * include `MostlyCleanConfigureTmp.am'
	  * declare target `mostlyclean-local' as dependent from target
	    `mostlyclean-configure-tmp'

	M: blackbox-tests:
	  * updated to commit `ab9584c962ea31c00f3e49652f354982dd23d356' of
	    the Ratfor Testsuite, in which the rules to clean temporary files
	    left by Zsh3 and configure and/or config.status are imported from
	    SteLib

2009-10-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	extend mostlyclean (tmp files left by zh3+configure)

	M: Makefile.am:
	  * in code looking for temporary directories erronously left by configure
	    (when run with Zsh 3): also look for `defines.awk' file, not only for
	    `subs.awk' file

2009-10-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	updated `blackbox-tests' submodule

	M: blackbox-tests:
	  * updated to commit `ea255c40d9faa621fba0c10c8516ae56c74eb51e'
	  * IMPORTANT: remove the *badly broken* auto-generation of list of tests
	  * add some new tests
	  * version requirement for autoconf relaxed: 2.64 => 2.62
	  * solve some (but not all) portability problems w.r.t. FreeBSD
	  * used more updated SteLib files (and related changes)
	  * other minor changes and improvements

	M: xfail-tests.txt:
	  * added `line-continuation-automatic.test'

	M: bootstrap.sh:
	  * do not call the script `blackbox-tests/bootstrap.sh' anymore: it
	    became useless, and have been removed

2009-10-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	minor fix in HACKING w.r.t. testsuite description

	M: HACKING:
	  * section "Testsuite":
	     - cite both `blackbox-tests/HACKING' and `blackbox-tests/README',
	       not only `blackbox-tests/README'
	     - repeat that `blackbox-testsuite' is a git submodule

2009-10-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved code organization in configure.ac (nitpicking)

	M: configure.ac:
	  * improved placing of and comments about code to process option
	    `--enable-maintainer-make-rules' i.e. to deal with enabling of
	    maintainer-specific make rules

2009-10-26  Stefano Lattarini  <stefano.lattarini@gmail.com>

	updated maint.mk, and related simplifications

	M: maint/maint.mk:
	  * updated to latest version on SteLib, which introduces the general
	    utility macro `$(normalize-boolean)'

	M: maint/personal/lattarini-stefano.mk:
	  * use `$(normalize-boolean)' instead of defining and use ad-hoc macro
	    `$(normalize-huge-strictdistcheck-sh-code)'
	  * other cosmetic changes

2009-10-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	better control on distributed files

	M: Makefile.am:
	  * New variable $(no_dist_files), holding a list of files which
	    must not be put in the distributed tarball.
	  * Added `dist-hook' target, checking that no file listed in
	    `$(no_dist_files)' is ever put in the distributed tarball.

2009-10-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	developers' personal *.mk files more easily integrated

	A: maint/developer.mk:
	  * new file (from SteLib), which ought to include an extension *.mk
	    specific to a single developer

	M: maint/maint.mk:
	  * updated from Stelib, so that it includes also the file
	    `maint/developer.mk'

	A: maint/personal/stefano-lattarini.mk:
	  * new file, extension specific to developer `Stefano Lattarini'

	D: maint/local-cfg-mk.samples:
	  * deleted, no more needed

	M: Makefile.am:
	  * removed `maint/local-cfg-mk.samples' from $(EXTRA_DIST)
	  * added `maint/developer.mk' to $(EXTRA_DIST)

2009-10-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	required autoconf version lowered: 2.64 => 2.62

	M: configure.ac:
	  * AC_INIT: required autoconf version is now 2.62, not 2.64

2009-10-22  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: new function put_back_string_cooked()

	M: src/io.c:
	  * new static inline function `pbstr_()'
	  * new public function `put_back_string_cooked()', implemented using
	    `pbstr_()'
	  * public function `put_back_string()' reimplemented using `pbstr_()'

	M: src/io.h:
	  * added prototype for `put_back_string_cooked()'

	M: src/tokenizer.c:
	  * in subroutine `deftok': use `put_back_string_cooked()' instead of
	    inlined code

2009-10-22  Stefano Lattarini  <stefano.lattarini@gmail.com>

	io.c: nitpicks in comments (two-liner)

	M: src/io.c:
	  * sligthy improved one-line description of `buf[]' and `bp' global
	    static variables

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	codegen.c: rewording in comment

	M: src/codegen.c:
	  * rewording in the comment describing function `is_all_digits()'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	use system strdup(), not hand-written strsave()

	M: configure.ac:
	  * added checks for strdup (abort if not found)

	M: src/hash.c:
	M: src/tokenizer.c:
	  * use `strdup()', not `strsave()'
	  * removed inclusion of "utils.h"

	M: src/error.c:
	M: src/codegen.c:
	  * removed inclusion of "utils.h" (probably it was already no more needed
	    in previous checkins, but was never removed -- so remove it now)

	D: src/utils.c:
	D: src/utils.h:
	  * removed, no more needed (they contained only the definition of
	    function `strsave()', which is no more used)

	M: src/Makefile.am:
	  * removed `utils.h' and `utils.c' from $(ratfor_SOURCES)

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: renaming functions of hash.c

	M: src/hash.c:
	  * function `lookup()' renamed to `hash_lookup()'
	  * function `install()' renamed to `hash_install()'
	  * in function `hash_install()': cosmetic changes to minor comments
	  * throghout: removed obvious/useless comments

	M: src/hash.h:
	M: src/tokenizer.c:
	  * updated accordingly to the renaming

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: rename `lookup.c' as `hash.c'

	D: src/lookup.c:
	A: src/hash.c:
	  * renamed

	D: src/lookup.h:
	A: src/hash.h:
	  * renamed

	M: src/Makefile.am:
	  * ratfor_SOURCES updated accordingly

	M: src/tokenizer.c:
	  * include "hash.h", not "lookup.h"

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring in tokenizer.c: look() => defn_lookup() (rename function)

	M: src/tokenizer.c:
	  * function `look()' renamed as `defn_lookup()'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: look() moved: utils.c => tokenizer.c

	M: src/utils.c:
	  * definition of function `look()' moved out to `tokenizer.c', as it's
	    used only in that file
	  * removed inclusion of "lookup.h": no more needed

	M: src/utils.h:
	  * removed prototype of `look()'

	M: src/tokenizer.c:
	  * new static function `look()', moved in from `utils.c'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: moved scopy() (utils.c => tokenzer.c)

	M: src/utils.c:
	  * definition of function `scopy()' moved out to `codegen.c', as it's
	    used only in that file

	M: src/utils.h:
	  * removed prototype of `scopy()'

	M: src/codegen.c:
	  * new static function `scopy()', moved in from `utils.c'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixlet in utils.c: remove usless include <ctype.h>

	M: src/utils.c:
	  * removed inclusion of <ctype.h> (no more needed)

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	utils.c: scopy(): use more idiomatic C

	M: src/utils.c:
	  * use more idiomatic C in subroutine `scopy()' (for loop with multiple
	    init/increment clauses)

2009-10-22  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tokenizer.c: integer_to_string: improved description

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: itoc() => integer_to_string() (renaming of function)

	M: src/tokenizer.c:
	  * function `itoc()' renamed as `integer_to_string()'
	  * function `get_numerical_raw_token()' modified accordingly:
	    call `integer_to_string()', not `itoc()'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: moved `itoc()' (utils.c => tokenzer.c)

	M: src/utils.c:
	  * definition of function `itoc()' moved in `src/tokenizer.c', as it's
	    used only in that file

	M: src/utils.h:
	  * removed declaration of `itoc()'

	M: src/tokenizer.c:
	  * new static function `itoc()', copied from utils.c

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: ctoi() => string_to_integer() (renaming of function)

	M: src/codegen.c:
	  * static function `ctoi()' renamed as `string_to_integer()'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: moved ctoi(): utils.c => codegen.c

	M: src/utils.c:
	  * function `ctoi()' moved to `codegen.c', as it's used only in that
	    file

	M: src/utils.h:
	  * removed declaration of `ctoi()'

	M: src/codegen.c:
	  * added new static function `ctoi()', moved in from utils.c

2009-10-22  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactor: codegen.c: code more idiomatic/standard

	M: src/codegen.c:
	  * caslab(): make code more idiomatic and more sticking to our coding
	    standards; also, variable `s' renamed to `sign'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactor: utils.c: ctoi(): removed uneeded parameter

	M: src/utils.c:
	  * ctoi(): removed parameter `offset': where never needed/used by the
	    code calling `ctoi()'
	  * ctoi(): function description slighty improved

	M: src/utils.h:
	  * declaration of `ctoi()' updated accordingly

	M: src/codegen.c:
	  * in brknext() and caslab(): simplified calls to `ctoi()', and removed
	    some variables become unused

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring: codegen.c: some variable's renamings

	M: src/codegen.c:
	  * brknext(), caslab(): use `offset' rather than `i' as variable name
	    for the offset to be passed to function `ctoi()'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactor in utils.c: ctoi(): variables' renaming

	M: src/utils.c:
	  * in function `ctoi()':
	     - local variable `k' renamed to `n' (it's not a counter, but
	       the value of the converted int, and we should reserve variable
	       names  i, j, k  for gounters)
	     - parameter `*i' renamed as `*offset'
	     - parameter `in[]' renamed to `str[]'
	     - counter `j' renamed as `i'
	     - improved description in heading comment

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	utils.[ch]: nitpicks & cosmetic fixes in `itoc()'

	M: src/utils.c:
	  * function `itoc()': variable `sign' has now value `-1' if the
	    integer to convert is < 0, value `+1' otherwise
	  * function `itoc()': improved description (in heading comment)

	M: src/utils.h:
	  * "normalized" declaration of function `itoc()': removed name of
	    parameter, laeve only its type

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring how "string" tokens are read (dead code removed)

	M: src/tokenizer.c:
	  * get_quoted_string_raw_token(): removed useless code duplicating
	    functionalities of the `ngetch()' function in `io.c'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	reading "string" tokens: error messages improved

	M: src/tokenizer.c:
	  * get_quoted_string_raw_token():
	     - if the given token is too short to contain the string read,
	       give a better error message (e.g. "string too long") instead
	       of the old message ("missing quote")
	     - use `quote_char' instead of `lexstr[0]' to close the string,
	       even on errors

2009-10-22  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring in tokenizer.c (renamed function: char_can_be_composed => can_char_be_composed)

	M: src/tokenizer.c:
	  * subroutine `char_can_be_composed' renamed as `can_char_be_composed'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactor (reading of string tokens): extract function

	M: src/tokenizer.c:
	  * get_quoted_string_raw_token(): new static subroutine.
	  * get_raw_token(): use new subroutine `get_quoted_string_raw_token()'
	    instead on inlined code

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring in tokenizer.c ("extract function")

	M: src/tokenizer.c:
	  * get_numerical_raw_token(): new static subroutine.
	  * char_can_be_composed(): new static subroutine.
	  * get_alphanumeric_raw_token(): new static subroutine.
	  * convert_relation_shortand(): now returns the length of the converted
	    token, rather than the offset of the last non-null character
	  * get_raw_token():
	     - variable `i' renamed to `toklen'
	     - use new subroutines instead on inlined code

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tokenizer.c: get_raw_token(): improved description

	M: src/tokenizer.c:
	  * get_raw_token(): improved leading comment containing brief description
	    of the function

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring in tokenizer.c w.r.t. token type setting (tok vs. ctyp)

	M: src/tokenizer.c:
	  * get_raw_token(): `tok' is no more initially assigned the type of the
	    starting char of the token being read: a new variable `ctyp' is used
	    for this purpose

2009-10-20  Stefano Lattarini  <stefano.lattarini@gmail.com>

	automatic line continuation for operators / ** //

	M: src/codegen.c:
	  * token_requires_automatic_line_continuation(): recognize `SLASH',
	    `OPERSTRCAT' and `OPEREXP' as tokens triggering automatic line
	    continuation

2009-10-20  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring w.r.t. automatic line continuation

	M: src/codegen.c:
	  * token_requires_automatic_line_continuation(): new function
	  * eatup(): use it

2009-10-20  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new token types for operators `**' and `//'

	M: src/lex-symbols.h:
	  * added new token types 'OPERSTRCAT' and 'OPEREXP'

	M: src/tokenizer.c:
	  * recognize the exponentiation operator `**' and the string
	    contatenation operator `//' as tokens

2009-10-22  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new macro SSTRLEN() convert strlen() retval to int

	M: src/rat4-common.h:
	  * new macro `SSTRLEN()': just call `strlen()' and convert its return
	    value to `int' (help to avoid compiler warnings)

	M: src/tokenizer.c:
	  * use `SSTRLEN', not `strlen'

	M: src/codegen.c:
	  * use `SSTRLEN', not `strlen'
	  * in one place: use `*s != EOS' eather than `strlen(s) > 0'

2009-10-22  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixlet: tokenizer.c: #include "tokenizer.h"

	M: src/tokenizer.c:
	  * added inclusion of header "tokenizer.h"

2009-10-22  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fix compiler warning in utils.c

	M: src/utils.c:
	  * function itoc(): added cast to `int' for the return value of `strlen',
	    to avoid spurious compiler warnings

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fix compiler warning in io.c

	M: src/io.c:
	  * rewrittern implemenation of function `put_back_string()' (this avoids
	    compiler warning about the result of a call to `strlen()' being
	    assigned to an integer variable)
	  * minor cosmetic changes in function `ngetch()'

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added more warnings to the C compiler

	M: configure.ac:
	  * try to add also the followings warning-enabling flags to $CFLAGS,
	    whenever supported by the C compiler:
	     + -Wnested-externs
	     + -Wwrite-strings
	     + -Wmissing-declarations
	     + -Wc++-compat
	     + -Wsign-conversion
	     + -Wdeclaration-after-statement

2009-10-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixed bug w.r.t. enabling warn flags in C compiler

	M: files/ax_check_cc_flag.m4
	  * Grabbed latest version from SteLib, which fixes a NASTY BUG in the
	    `AX_CHACHE_CC_FLAG' macro; the bug prevented our configure from
	    enabling all avaiable warnings flag in the C compiler.
	    The bug has been fixed by doing the following substitution in macro
	    `AX_CACHE_CHECK_CC_FLAG':
	      - s/ax4_cc_flag_norm/ax_cc_flag_norm/
	    The bug prevented AX_CACHE_CHECK_CC_FLAG from ever running the code
	    in ACTION-IF-SUCCESS argument, even when the compiler flag to test
	    was supported.

	M: NEWS:
	  * updated accordingly: cite tell about the fixed bug

2009-10-22  Stefano Lattarini  <stefano.lattarini@gmail.com>

	maint/config.site: do not override user choice

	M: maint/config.site:
	  * do not unconditionally set variables which should be overridable by
	    command line switches of configure; e.g. don't use:
	     - enable_foo=yes
	    but rather use:
	     + enable_foo=${enable_foo-yes}

2009-10-22  Stefano Lattarini  <stefano.lattarini@gmail.com>

	updated submodule `blackbox-tests'

	M: blackbox-tests:
	  * updated to release `0.9e':
	     - improving location of auxiliary testsuite files
	     - better creation/control of distributed tarball
	     - use `maint/maint.mk', not `maint.mk
	     - tmpfiles left by zsh3 are cleaned by `mostlyclean' rather than by
	       `distclean'

2009-10-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	testsuite: recognize workaround for a bug in mksh (mirbsd korn shell)

	M: maint/local-cfg-mk.samples:
	  * section "stefano on bigio":
	     - re-added `mksh' in `$(strict_distcheck_shells)', now that we have
	       a workaround for its bug in "Ratfor Testsuite" and accordingly
	       updated the `blackbox-tests' subpackage
	     - keep `mksh' in `$(strict_distcheck_shells)' by default, i.e. even
	       when $(RAT4_HUGE_DISTCHECK) is false

2009-10-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tmpfiles left by zsh3 are cleaned by `mostlyclean' rather than `distclean'

	M: Makefile.am:
	  * target `distclean-local' renamed as `mostlyclean-local'

2009-10-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fix: added forgotten files to $(EXTRA_DIST)

	M: Makefile.am:
	  * added files to $(EXTRA_DIST):
	      - maint/local-cfg-mk.samples
	      - maint/prj-post-cfg.mk

2009-10-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	use `maint/maint.mk', not `maint.mk'

	M: GNUmakefile:
	  * updated to latest version from Stelib, which includes `maint/maint.mk'
	    rather than simply `maint.mk'

	D: maint.mk:
	A: maint/maint.mk:
	  * moved

	M: Makefile.am:
	  * in $(EXTRA_DIST): list `maint/maint.mk', not `maint.mk'

2009-10-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	update submodule blackbox-tests (zsh3, mksh bugfix)

	M: blackbox-tests:
	  * git submodule updated:
	     - now the testsuote works correcly even with mirbsd korn shell
	       (added a workaround for a bug in the combo "mksh"+"glibc")
	     - now "distcheck" works ok even when `CONFIG_SHELL' is zsh3

	M: Makefile.am:
	  * added proper `distclean-local' to remove files errenously left behind
	    by Zsh 3.x, so to avoid spurious `distcheck' failures

	M: configure.ac:
	  * added checks for `$FGREP', used in new `distclean-local' target in
	    Makefile.am

2009-10-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	cosmetic change

	M: Makefile.am:
	  * minor improvement in comment

2009-10-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	version bumped to 1.0m

	M: configure.ac:
	  * version in AC_INIT bumped: 1.0l => 1.0m

	M: NEWS:
	  * mention version 1.0m

2009-10-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	HACKING: improved description of bootstrapping

	M HACKING:
	  * improvements in the description of the bootstrapping process

2009-10-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	updated blackbox-tests (autogenerated tests list)

	M: blackbox-tests:
	  * submodule updated to a version which automatically generates the list
	    of test scripts

	M: maint/bootstrap.sh:
	  * modified to appropriately call the bootstrap script of the
	    `blackbox-tests' submodule

2009-10-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	HACKING: removed whitespaces from "empty" lines

	M: HACKING:
	  * cosmetic change: removed whitespaces from "empty" lines

2009-10-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Testsuite: workaround a bug in gfortran 4.0 (w.r.t. the `stop' builtin)

	M: blackbox-tests:
	  * submodule updated to commit `' (introduced workaround for bugs in
	    gfortran-4.0 handling of `stop' builtin, and fixed heisenbug in
	    `timer' helper script)

	M: NEWS:
	  * updated accordingly

2009-10-14  Stefano Lattarini  <stefano.lattarini@gmail.com>

	disable silent-rules by default for users

	M: configure.ac:
	  * AM_SILENT_RULES: make `silent-rules' disabled by default

	M: maint/config.site:
	  * add definition of variable `enable_silent_rules' to `yes', to make
	    silent-rules enabled by default for maintainers

2009-10-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	passing list of XFAIL tests to testsuite submodule

	M: blackbox-tests/:
	  * Submodule updated to latest version of ratfor-testsuite (commit
	    b9530e1ca2b4f478ac7...), which made the list of xfailing tests
	    settable at configure time rather then hard-wired in
	    tests/Makefile.am.

	M: configure.ac:
	  * Set and export variable `$RAT4_TESTSUITE_XFAIL_TESTS', to be
	    used in sub-configure of blackbox-tests to setup the list of
	    tests expected to fail with Public Domain Ratfor; this is done
	    by reading the file `xfail-tests.txt'.
	  * Some existing comments about passing precious variable to the
	    recusrively-invoked configure script(s).

	A: xfail-tests.txt:
	  * new file, holding the list of blackbox tests from the Ratfor
	    Testsuite subpackage which are expected to fail with Public
	    Domain Ratfor.

	M: Makefile.am:
	  * added `xfail-tests.txt' to $(EXTRA_DIR)

2009-10-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	HACKING: removed extra white spaces

	M: HACKING
	  * removed white spaces from empty lines

2009-10-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	.gitignore: removed idiosyncratic ignore-rules

	M: .gitignore:
	  * removed idiosyncratic or devloper-specific stuff (vim swap files,
	    typical names of files containing git commit messages, etc); this
	    stuff should now be included by individual developers in their
	    "global gitignore file" -- settable with:
	    `git config --global core.excludesfile GLOBAL-GITIGNORE-FILE'

2009-10-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	HACKING: c-style: forbid tabs & how indent preproc

	M: HACKING:
	  * tell to avoid tab characters in C sources and headers
	  * tell how to indent preprocessor directives (the `#' character must
	    always be at the beginning of line, followed by the required
	    whitespace)

2009-10-05  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bumped version to 1.0l

	M: configure.ac:
	    * version in AC_INIT bumped: 1.0k => 1.0l

	M: NEWS:
	    * cite 1.0l as latest version

	M: blackbox-tests/:
	  * Submodule updated to latest tagged version of The Ratfor Testsuite.
	    Not a real change, since this tagged version is basically the same
	    version we had before, just, well, "tagged". This update keeps things
	    nice and clear

2009-10-04  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Updated Ratfor Testsuite supackage

	M: blackbox-tests:
	  * updated to a new version which fixes a bug in the auxilary script
	    `timer' (w.r.t. ksh)

2009-10-04  Stefano Lattarini  <stefano.lattarini@gmail.com>

	pull in latest SteLib's files

	M: m4/ax_arg_enable.m4:
	M: m4/ax_check_cc_flag.m4:
	M: m4/ax_misc_include_maint_config_site.m4:
	M: m4/ax_misc_report_if_beta.m4:
	  * pulled in from latest versions of SteLib (almost no changes, done
	    just for consistency)

2009-10-04  Stefano Lattarini  <stefano.lattarini@gmail.com>

	strict-distcheck: adapt to latest SteLib's changes

	M: maint/prj-post-cfg.mk:
	  * since SteLib's `strict-distcheck.mk' does not use/define C compilers
	    anymore, we do this by ourselves

	M: maint/strict-distcheck.mk:
	  * updated from latest version on SteLib (which does not use/define C
	    compilers anymore)

2009-10-04  Stefano Lattarini  <stefano.lattarini@gmail.com>

	samples of local-cfg.mk: adapt to changes on bigio

	M: maintlocal-cfg-mk.samples:
	  * in section for "stefano on bigio":
	     - removed gcc-3.3 (it has been uninstalled from bigio), use gcc-3.4
	       instead
	     - added newly installed /opt/vintage/bin/gfortran-4.0 to the list
	       of fortran 77 compilers (only when `$(RAT4_HUGE_DISTCHECK)' is
	       set to a "true" value)
	     - added newly installed /opt/vintage/bin/gcc-4.0 to the list of C
	       compilers (only when `$(RAT4_HUGE_DISTCHECK)' is set to a "true"
	       value)

2009-10-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring (improved names of variables/macros)

	M: src/*.[ch]:
	  * Global variable `level' renamed to clearer name `inclevel'

2009-10-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	NEWS: tell about use of SteLib

	M: NEWS:
	  * tell about the use of files from SteLib in Public Domain Ratfor

2009-10-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	local-cfg-mk.samples: fix for "stefano on bigio"

	M: maint/local-cfg-mk.samples:
	  * for "stefano on bigio" fixed the list of C compilers compilers
	    for strict-distcheck (removed gcc-4.1 amd g++-4.1 which have been
	    uninstalled at bigio)

2009-10-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	importing local autoconf macros from SteLib

	D: m4/rat4_arg_enable.m4:
	A: m4/ax_arg_enable.m4:
	D: m4/rat4_check_cc_flag.m4:
	A: m4/ax_check_cc_flag.m4:
	D: m4/rat4_include_maint_config_site.m4:
	A: m4/ax_misc_include_maint_config_site.m4:
	  * removed old files
	  * new versions fetched from SteLib

	A: m4/ax_misc_report_if_beta.m4:
	  * new file from SteLib

	M: configure.ac:
	  * updated accordingly, to reflect some macros/variables
	    renaming
	  * fixed usage of `m4_pattern_forbid' for local autoconf macros:
	    from:
	      - m4_pattern_forbid([^_?AX_])
	    (which din't worked as expected) to:
	      + m4_pattern_forbid([^_AX_])
	      + m4_pattern_forbid([^AX_])
	    (and similarly for `RAT4' instead of `AX')

2009-10-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	removed wrapper gor gcc2 in maint/

	D: maint/gcc-2.95-wrapper.bash:
	  * file removed: if needed, it really pertains to the developer's system,
	    not to the shared code repository

	M: maint/local-cfg-mk.samples:
	  * modified: do not use `$(abs_maintdir)/gcc-2.95-wrapper.bash' anymore
	    in `$(strict_distcheck_c_compilers)', simply use `gcc-2.95-wrapper'
	    instead

2009-10-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	stable release: use `make stable', no `make major'

	M: maint/release.mk:
	  * grabbed from latest version on stelib, which uses `make stable'
	    rather than `make major' to do a stable version

	M: HACKING:
	  * updated accordingly

2009-10-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fix samples for local-cfg.mk file (w.r.t. zsh)

	M: maint/local-cfg-mk.samples:
	  * Do not use anymore zsh-with-option (e.g. `zsh -o no_function_agzero')
	    in `$(strict_distcheck_shells)': they are now unsopported by the new
	    `maint/strict-distcheck.mk', and even when they where supported they
	    didn't work as expected (a zsh as CONFIG_SHELL breaks the
	    automake-generated makefiles).
	    Use instead something like `$(abs_maintdir)/zsh/sh', which is epected
	    to be a symlink to zsh, which make it run in bourne-compatibility mode
	    (since it has the `sh' basename)
	  * add releated comments

2009-10-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	start using files from SteLib

	M: maint/strict-distcheck.mk:
	M: maint/release.mk:
	M: maint.mk:
	  * now copied verbatim from SteLib, to avoid/minimize code duplication
	  * new versions from SteLib present some minor bug fixings and semantic
	    changes

	A: maint/prj-post-cfg.mk:
	  * new file, incuded by maint.mk to enable project-specific configuration
	    and overrides

	M: configure.ac:
	M: Makefile.am:
	  * related change: use now use `ENABLE_MAINTAINER_MAKE_RULES' instead of
	    `RAT4_ENABLE_MAINTAINER_MAKE_RULES', since this is thae variable used
	    by SteLib's maint.mk

2009-09-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tiny improvement messagrs from `strict-distcheck'

	M: maint/strict-distcheck.mk:
	  * rules associated with target `strict-distcheck' improved so that
	    errors and importat messages stick out better; this in turn required
	    the introduction of:
	  * now internal macros:
	     - _SD_DisplayFlags
	     - _SD_StrictDistcheckDisplay

	M: maint/local-cfg-mk.samples:
	  * tinyfix in comment

2009-09-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tiny improvement in `strict-distcheck'

	M: maint/strict-distcheck.mk:
	  * in target `config-shell-strict-distcheck-hook': do not display anymore
	    40 lines of the "patched" configure script, but only about a dozen

2009-09-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Added bootstrap script (mostly init git submodule)

	A: ./maint/bootstrap
	  * new file, bootstrap from check-out sources.

	M: HACKING:
	  * tell to use ./maint/bootstrap.sh to bootstrap checked-out sourcees
	  * tell about initialization of git submodules

2009-09-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added "Ratfor Testsuite" as a git submodule

	D: blackbox-tests/Makefile.am:
	D: blackbox-tests/configure.ac:
	  * temporary dummy files no more needed: removed

	A: .gitmodules:
	A: blackbox-tests:
	  * new files

	M: HACKING:
	  * reference the git submodule "Ratfor Testsuite"

2009-09-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	removed unused maint/remake.mk makefile fragment

	M: maint.mk:
	  * definition of macro `$(_autoreconf)' moved in from `maint/remake.mk'
	  * removed inclusion of `maint/remake.mk'

	D: maint/remake.mk:
	  * removed: it defined only "convenience" rules there were never used
	    (so they where not that much convenient)

	M: Makefile:
	  * removed `maint/remake.mk' from $(EXTRA_DIST)

2009-09-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	HUGE: removed `blackbox-tests' (will be submodule)

	D: blackbox-tests/*:
	  * removed everything, the subproject has been truned into an independent
	    Git repository, and we are going to re-import it later as a Git
	    submodule

	A: blackbox-tests/Makefile.am:
	A: blackbox-tests/configure.ac:
	  * dummy files (temporary)

	M: .gitignore:
	  * now ignore files `git.log' and `git.log[0-9]' only if they are placed
	    in the top-level directory
	  * revomed `_build': it has become useless, since we are now used to do
	    in-tree builds

2009-09-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	version bumped: 1.0j => 1.0k

	M: blackbox-tests/README:
	  * removed extra white spaces

	M: configure.ac:
	  * version in AC_INIT bumped: 1.0j => 1.0k

	M: NEWS:
	  * refer to the latest version as `1.0k'

2009-09-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	updated blackbox-tests/README

	M: blackbox-tests/README:
	  * Updated to reflect the fact that `blackbox-tests' is now a subpakcage.
	  * Tell about how configure looks for ratfor, and how to override this
	    check using the `RAFOR' precious variable
	  * BUGFIX: do not refer anymore to the now unused `RAT4_TESTSUITE_F77'
	    configure's precious variable: refer to the `F77' variable instead.
	  * Do not tell anymore how to fix a bug in ratfor: this is not a problem
	    for this package anymore. Such an information should be provided by
	    e.g. the HACKING file of the ratfor distribution.

	M: configure.ac:
	  * tiny fixes in comments:
	     - s|tests/configure.ac|blackbox-tests/configure.ac|
	     - s|tests/configure|blackbox-tests/configure|
	  * minor rewordings in comments

2009-09-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	in C code: s/NFILES/INCLUDE_MAX_DEPTH/

	M: src/init.c:
	M: src/tokenizer.c:
	M: src/rat4-global.h:
	M:src/rat4-common.h:
	  * #defined constant `NFILES' renamed to `MAX_INCLUSION_DEPTH'

2009-09-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	package name: "ratfor" => "Public Domain Ratfor"

	M: configure.ac:
	  * in AC_INIT: use `Public Domain Ratfor', not `ratfor', as package name

	M: src/main.c:
	  * in `main()': when leaving `fingerprint' in the generated output: use
	  PACKAGE_STRING (defined in config.h) instead of hard-wired "Public
	  Domain Ratfor, version ..."

	M: .gitignore:
	  * updated accordingly: removed wildcards:
	      - ratfor-[0-9]*.tar.gz
	      - ratfor-[0-9]*/
	    added wildcards:
	      + public-domain-ratfor-[0-9]*.tar.gz
	      + public-domain-ratfor-[0-9]*/

2009-09-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	HACKING: describe how to make a release

	M: HACKING:
	  * Written section "Make a realease" (previously it consisted only of
	    a big "TODO")

2009-09-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	nitpick in Makefile.am comments

	M: Makefile.am:
	  * minor rewording in heading comment

2009-09-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	subdir `tests/' renamed as `blackbox-tests/'

	The subdirectory `tests' (containing the "Ratfor Testsuite" subpackage)
	contained in turn a subdirectory named `tests/' (containing the test
	scripts and their data files); this might cause confusion, so the
	top-level subdirectory `tests/' has been renamed as `blackbox-tests/'.

	D: tests/:
	A: blackbox-tests/:
	  * renamed

	M: Makefile.am:
	  * definition of `$(SUBDIRS)' updated accordingly

	M: configure.ac:
	  * call to `AC_CONFIG_SUBDIRS' updated accordingly

	M: HACKING:
	  * in the section "Testsuite"
	      - refer to `blackbox-tests/README', not to `tests/README'
	      - tell that we only do blackbox-testing, for the moment

	M: NEWS:
	  * updated accordingly

2009-09-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	moved test scripts in new subdir `tests/tests/'

	D: tests/*.test:
	A: tests/tests/*.test:
	D: tests/*.data:
	A: tests/tests/*.data:
	D: tests/CheckTestsList.am:
	A: tests/tests/CheckTestsList.am:
	D: tests/defs.in:
	A: tests/tests/defs.in:
	  * moved

	A: tests/tests/Makefile.am:
	  * new file, contains most of the rules/definitions that were in
	    `tests/Makefile.am'
	  * other related and necessary changes

	M: tests/Makefile.am:
	  * most content moved to `tests/tests/Makefile.am'
	  * added `tests' to $(SUBDIRS)
	  * other related changes

	M: tests/configure.ac:
	  * fixed sentinel file in AC_CONFIG_SRCDIR:
	      while_f77.test => tests/ifelse-ambiguity_f77.test
	  * version in AC_INIT bumped: 0.9a => 0.9b
	  * added `tests/Makefile' to AC_CONFIG_FILES
	  * in AC_CONFIG_FILES: `tests/defs.in' generates `tests/defs.sh' (no more
	    `defs.in' generates `defs.sh')

	A: tests/tests/.gitignore:
	  * new file

	M: tests/.gitignore:
	  * fixed appropriately

	M: NEWS:
	  * minor rewordings

2009-09-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	making testsuite a subpackage (.gitignore)

	M: tests/.gitignore:
	  * updated appropriately
	  * also added wildcard `*.log-t'

	M: .gitignore:
	  * removed `config.site'
	  * added `maint/config.site'
	  * improved wildcards for distdir and tarballs

2009-09-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	making testsuite a subpackage

	M: tests/Makefile.am:
	  * modified heading comment (this no more the makefile of the `tests/'
	    subdir or `Public Domain Ratfor', but the top-level makefile of the
	    `Ratfor Testsuite' package)
	  * removed rules to rebuild & clean ratfor executable
	  * added proper definition of ACLOCAL_AMFLAGS

	M: configure.ac:
	  * removed configure checks for the ratfor testsuite (have been moved
	    to `tests/consigure.ac')
	  * removed options `color-tests' and `parallel-tests' from the call to
	    `AM_INIT_AUTOMAKE'
	  * removed `tests/Makefile' and `tests/defs.in' from `AC_CONFIG_FILES'
	  * added call to `AC_CONFIG_SUBDIRS(tests)'

	A: tests/configure.ac:
	  * new file, contains configure checks for the ratfor testsuite
	  * also search for a ratfor executable

	M: tests/defs.in:
	  * simplified definition of $RATFOR (path/name of ratfor executable to
	    be tested), using the fact that it is AC_SUBST'd by `tests/configure'
	  * everywhere: uses `$F77' instead that `$RAT4_TESTSUITE_F77'

	D: m4/rat4_prog_diff_u.m4:
	A: tests/m4/rat4_prog_diff_u.m4:
	  * file moved

	D: m4/rat4_prog_f77_for_testsuite.m4:
	A: tests/m4/rat4_prog_f77.m4:
	  * file moved
	  * simply uses `$F77' instead that `$RAT4_TESTSUITE_F77'
	  * macro renamed from `RAT4_PROG_F77_FOR_TESTSUITE' to `RAT4_PROG_F77'
	  * serial number reset to `1'

	AS: tests/m4/rat4_arg_enable.m4:
	AS: tests/m4/rat4_check_cc_flag.m4:
	AS: tests/m4/rat4_include_maint_config_site.m4:
	  * new files, symlinks to correspondent files in top-level `m4/' directory

	A: m4/rat4_include_maint_config_site.m4:
	  * new file, contains definition of macro `RAT4_INCLUDE_MAINT_CONFIG_SITE'
	    which try to read in configure (with `.' builtin) the file
	    `maint/config.site', if it is present

	A: tests/maint/config.site:
	  * new file, just a copy from `maint/config.site'

	A: tests/NEWS:
	  * new file

	M: tests/README:
	  * added some TODO for required changes

	M: NEWS:
	  * updated appropriately

2009-09-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bumped version to 1.0j

	M: NEWS:
	  * write out last version as `1.0j'

	M: configure.ac:
	  * in AC_INIT: bump version: 1.0i => 1.0j

2009-09-26  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tiny improvement in `strict-distcheck'

	M: maint/strict-distcheck.mk:
	  * added definition `PERL=false' to $(strict_distcheck_null_am_makeflags)

2009-09-26  Stefano Lattarini  <stefano.lattarini@gmail.com>

	make `strict-distcheck' simplified (with speedup)

	M: maint/strict-distcheck.mk:
	  * previously, we ran `make' two times for every cc+f77+sh configuration,
	    one time with one job only (`make') and the other one with eight(!)
	    jobs (`make -j8'); now we run make one time only, with two jobs
	    (`make -j2').

2009-09-26  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added check in testsuite: $RATFOR must be abspath

	M: tests/defs.in:
	  * check that the ratfor program to be used in testing is given as an
	    absolute path, dying with an hard-error if it is not so

2009-09-26  Stefano Lattarini  <stefano.lattarini@gmail.com>

	nitpick in tests/defs.in

	M: tests/defs.in:
	  * before running the testcase: print also the path of the ratfor program
	    which will be used in testing (saved in variable `$RATFOR')

2009-09-26  Stefano Lattarini  <stefano.lattarini@gmail.com>

	make `strict-distcheck' samples more configurable

	M: maint/local-cfg-mk.samples:
	  * new section "shared", containing normalization of make variable
	    `$(RAT4_HUGE_DISTCHECK)'
	  * for "stefano on bigio": use all the huge list of shells and compilers
	    only if the make variable `$(RAT4_HUGE_DISTCHECK)' is set to a "true"
	    value)

2009-09-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in Makefile.am w.r.t. HACKING & EXTRA_DIST

	M: Makefile.am:
	  * add `HACKING', not `maint/HACKING', to `$(EXTRA_DIST)'

2009-09-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	moved file: maint/HACKING => HACKING

	D: maint/HACKING:
	A: HACKING:
	  * moved

2009-09-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in RAT4_ARG_ENABLE w.r.t. default action

	M: m4/rat4_arg_enable.m4:
	  * BUGFIX: if DEFAULT-ACTION is not explicitly specified, use
	    correctly ACTION-IF-NOT-GIVEN in its place (this was the documented
	    behaviour, but it didn't worked due to the following bug:
	      - was:        m4_default([$5], [$3])
	      - should be:  m4_default([$5], [$4])

2009-09-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved bootstrapping

	M: maint/HACKING:
	  * new section "Configuring and Building":
	    - speak in some details about configure options `--enable-werror-cflag'
	      and `--enable-maintainer-make-rules'
	    - tell to use GNU make
	    - tell about the `maint/config.site' file

	M: configure.ac:
	  * include the file `maint/config.site' (relative to the srcdir), if it
	    exists

	A: maint/config.site:
	  * new file, contains initializations and default settings for configure
	    script which are useful for the maintainers

2009-09-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	configure.ac: refactoring w.r.t. user-defn opts

	A: m4/rat4_enable_arg.m4:
	  * new file, containing definition of macro `RAT4_ARG_ENABLE', (wrapper
	    around `AC_ARG_ENABLE' implementing our usage pattern of that macro)

	M: m4/rat4_check_cc_flag.m4
	  * bumped serial (1 -> 2) and fixed name in serial line

	M: configure.ac:
	  * updated to use `RAT4_ARG_ENABLE' instead of more convoluted calls
	    to `AC_ARG_ENABLE' (this also removes some code duplication)

2009-09-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	NEWS: tell about enabling of C warns and `-Werror'

	M: NEWS:
	  * tell that now the `configure' scripts try to enable as many warnings
	    as possible in the C compiler
	  * reference the configure option `--enable-werror-flags', which if given
	    try to enable the `-Werror' compiler flag (if supported), to turn
	    compile-time warnings into errors.
	  * tell that now, even with GNU make, a `make' issued in an unconfigured
	    tree do not trigger autotools boostrapping anymore

2009-09-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	maint make rules in GNUmakefile made optional

	Now we let the user decide if he wants to import maintainer make
	rules in GNUmakefile, through the new automake conditional
	`RAT4_ENABLE_MAINTAINER_MAKE_RULES' and new configure option
	`--enable-maintainer-make-rules'.

	M: Makefile.am:
	  * define macro `$(RAT4_ENABLE_MAINTAINER_RULES)' to `yes' if the
	    automake conditional `RAT4_ENABLE_MAINTAINER_MAKE_RULES' is true,
	    to `no' otherwise

	M: maint.mk:
	  * splitted in some new files maint/*.mk (listed below)
	  * consider rules and definition of iterest rules
	  * includes the maint/*.mk files only if the macro
	    `$(RAT4_ENABLE_MAINTAINER_MAKE_RULES)' is set to "yes"
	    (which happens only if the automake conditional
	    `RAT4_ENABLE_MAINTAINER_MAKE_RULES' is true),

	A: maint/strict-distcheck.mk:
	  * new file, from older `maint.mk', contains maintainer rules and
	    definitions to run `strict-distcheck'
	  * removed support to automatically bootstrap source tree with make
	    from an unconfigured source tree

	A: maint/release.mk:
	  * new file, from older `maint.mk', contains maintainer rules to build
	    a beta or stable release

	A: maint/remake.mk:
	  * new file, from older `maint.mk', contains maintainer rules to
	    regenerate autotools files and properly reconfigure the source/build
	    tree

	M: Makefile.am:
	  * added the new maint/*.mk files to `$(EXTRA_DIST)'

	M: NEWS:
	  * updated accordingly, by telling that now maintainer-specific make rules
	    are imported only if the build tree has been configured with the
	    `--enable-maintainer-make-rules' option
	  * nitpick: fixed spacing after full stops

2009-09-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added maint/HACKING to distributed files

	M: Makefile.am:
	  * added `maint/HACKING' to $(EXTRA_DIST)

2009-09-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	moved most maintainer-specific stuff in `maint/'

	M: maint.mk:
	  * define new variables `$(maintdir)' and `$(abs_maintdir)', being resp.
	    `$(srcdir)/maint' and `$(abs_srcdir)/maint'
	  * include `$(maintdir)/local-cfg.mk', not `$(srcdir)'
	  * some reordering and other cosmetic changes

	D: local-cfg.mk.samples:
	A: maint/local-cfg-mk.samples:
	  * moved in `maint/'
	  * for "stefano on bigio": use `$(abs_maintdir)/gcc-2.95-wrapper.bash',
	    not `$(abs_srcdir)/gcc-2.95-wrapper.bash '

	A: maint/gcc-2.95-wrapper.bash:
	  * new file, wrapper around gcc-2.95 to work around incompatibilities
	    with `-Werror' flag; useful only to some maintainers.

	A: maint/config.site:
	  * useful configure pre-initialization for maintainers (e.g. to
	    automtically enable `-Werror' and "maintainer make rules")

	D: HACKING:
	A: maint/HACKING:
	  * moved in `maint/'

	M: .gitiginore:
	  * use `maint/local-cfg.mk', not `local-cfg.mk.samples'
	  * removed `gcc-2.95-wrapper.bash'
	  * added `config.site' (*not* `maint/config.site')

2009-09-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	removed support for g++-3.3

	M: local-cfg.mk.samples:
	  * For "stefano on bigio": removed `g++-3.3' from the list of C
	    compilers ratfor is to be tested with in `strict-distcheck' (i.e.
	    `$(strict_distcheck_c_compilers)': it failed to correctly recognize
	    the C function `vfprinf()' in configure, and we are already too
	    much generous supporting g++ of the 4.x series. So drop it.

2009-09-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added support for gcc-2.95

	M: local-cfg.mk.samples:
	  * For "stefano on bigio": added `$(abs_srcdir)/gcc-2.95-wrapper.bash' to
	    $(strict_distcheck_c_compilers) (list of C compilers to be tested in
	    `strict-distcheck'). We need to use a wrapper because gcc-2.95 produces
	    spurious warnings and thus abort compilation under `-Werror', even if
	    nothing is wrong; our wrapper takes care of this, by stripping
	    `-Werror' from the command line arguments.

	M: .gitignore:
	  * added `gcc-2.95-wrapper.bash'

2009-09-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in configure.ac (option --enable-werror)

	M: configure.ac:
	  * BUGFIX: enable `-Werror' only if `$enable_werror_cflag' is set to a
	    "true" value (this makes `--disable-werror-cflag' work again)

2009-09-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in samples of local-cfg.mk

	M: local-cfg.mk.samples:
	  * bugfix: for "stefano on bigio": in definition of
	    `$(strict_distcheck_c_compilers)': use `/usr/local/bin/pcc',
	    not `/usr/bin/pcc', as the path of the Portable C Compiler

2009-09-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	add `-Werror' to cflags only if user requires it

	M: configure.ac:
	  * new option `--enable-werror-cflag'
	  * try to add `-Werror' to $CFLAGS only if the option
	    `--enable-werror-cflag' was given

	M: maint.mk:
	  * target `strict-distcheck' modified accordingly to always enable
	    `-Werror': added `--enable-werror-cflag'

2009-09-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	extended compilers list in local-cfg.mk: added pcc

	M: local-cfg.mk.samples:
	  * for "stefano on bigio": added `pcc' to list of C compilers, i.e.
	    `$(strict_distcheck_c_compilers)'

2009-09-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	avoid compiler warnings on gcc-4.1

	M: tests/timer.c:
	  * handle_child():
	     - unconditionally initialize `exit_info.status' and
	       `exit_info.signal', to avoid compilers warnings like:
	         "... may be used uninitialized in  this function"
	     - minor related improvement: now, by default, `exit_info.status'
	       is initialized to `E_UNEXPECT', not to `-1'
	  * main():
	     - unconditionally initialize `exit_info.status' and
	       `exit_info.signal' to bogus values, to avoid compilers
	       warnings like:
	         "... may be used uninitialized in this function"
	     - added a couple of `assert()' calls, plus other minor sanity checks
	  * added dummy definition of `assert()' macro (will be removed when we'll
	    add support for assertions)

2009-09-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	maint.mk include *cfg.mk to allow user override

	Now `maint.mk' include the file `local-cfg.mk', so that the maitainer can
	easily override the `maint.mk' defaults if he needs to do so.

	M: maint.mk:
	  * include `local-cfg.mk', if it exists
	  * various bug-fixings an inprovements in the definition/itialization of
	    `$(strict_distcheck_shells)' & related stuff

	A: local-cfg.mk.samples:
	  * keep examples of possible `local-cfg.mk' files, which might be useful
	    to individual maintainers but cannot be shared between all maintainers

	M: .gitignore
	  * added `local-cfg.mk'

2009-09-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added support for C++ compilers

	Modified Ratfor's sources so that now if can be compiled by C++ compilers
	too (well, at least by g++)

	M: HACKING:
	  * New section "C++ Compatibility"

	M: NEWS:
	  * Tell that ratfor is now compilable also with C++ compilers

	M: configure.ac:
	  * Added call to AH_TOP to define macros in <config.h>:
	      - BEGIN_C_DECLS
	      - END_C_DECLS
	      - C_DECL
	    This macros are be used to avoid name mangling by C++ compiler, and to
	    ensure correct linkage

	M: src/*.[ch]:
	M: src/mklexer.sh:
	  * suitably updated

	M: src/rat4-global.h:
	  * NFILES (maximum depth of include stack) raised from 7 to 30

2009-09-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	extended `strict-distcheck' maintainer target

	M: maint.mk:
	  * do the distcheck with more Shell/C-compiler/Fortran-compiler/makefiles
	    combinations; this requires some new variables:
	      - $(strict_distcheck_c_compilers)
	      - $(strict_distcheck_shells)
	      - $(StrictDistcheckLoopBegin)
	      - $(StrictDistcheckLoopEnd)
	  * some typofixes in comments

	M: Makefile.am:
	  * added definition of target `distcheck-hook' (since we need to
	    extend it in `maint.mk')

2009-09-23  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixed bad bug in testsuite (breaking VPATH builds)

	M: tests/Makefile.am:
	  * in definitions of environment variables passed to tests script: define
	    `RAT4_TESTUITE_RATFOR_EXECUTABLE' rather than `TESTED_RAFOR', to pass
	    the path of the ratfor binary to be tested

	M: tests/defs.in:
	  * now we expect to find binaries to be used by the testsuite in
	    `$testrootdir' (absolute path of the directory where the test script
	    is started) rather than in `$srcdir' (directory where `defs.in' and
	    the test scripts lie)
	  * added code to display the value of $PATH before running the test
	  * minor cosmetic changes to the way in which the current working
	    directory of the test script is displayed before running the test

2009-09-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improvroved/updated .gitignore filed

	M: .gitignore:
	M: src/.gitignore:
	M: tests/.gitignore:
	  * suitably updated

2009-09-20  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixed bug in code enabling stricter cc warnings

	M: m4/rat4_check_cc_flag.m4:
	  * in definition of macro `RAT4_CACHE_CHECK_CC_FLAG':
	     - BUGFIX: when checkking the value of the cache variable:
	        s/$rat4_cv_cc_check_flag_.../$rat4_cv_check_cc_flag_.../
	     - fixed commend to cite also the fourth anf fifth arguments (resp.
	       "ACTION-IF-TRUE" and "ACTION-IF-FALSE")

	M: src/codegen.c:
	M: src/codegen.h:
	M: src/parser.c:
	  * fixed bug revelaed by strict cc warnings: removed unused parameter
	    `lab' from `elseifc()' (new prototype is now `void elseif(void)'

	M: tests/timer.c:
	  * in `xkill()': fixed bug revelaed by strict cc warnings: use `pid', not
	    `cpid', for thw value of the child process' PID
	 * in `timeout()': fixed bug revelaed by strict cc warnings: `signal()'
	   fails only if it return `SIG_ERR', not an int < 0.
	 * subroutine `timeout()' renamed `handle_timeout()'

2009-09-20  Stefano Lattarini  <stefano.lattarini@gmail.com>

	make `timer' (for tests) an external command

	M: tests/defs.in:
	  * Prepended `$srcdir' to `$PATH'
	  * Default ratfor program to be tested is now `$srcdir/ratfor', no more
	    `$(pwd)/ratfor'
	  * Removed subroutine `timer()': it was way too hackish, it didn't work
	    as expected, it was fundamentally broken. It has been replaced by the
	    new external command `timer', built from file `tests/timer.c'. So now
	    `timer' just calls  `$srcdir/timer'
	  * Added definition of `$CC' and `$CFLAGS' as set by configure (needed in
	    the new extended version of the file `tests/000sanity.test')
	  * Other minor mostly cosmetic changes

	A: tests/timer.c:
	  * new file, needed to build the command `timer', used by the testsuite

	M: tests/000sanity.test:
	  * added sanity checks on the `timer' utility

	M: tests/*.test:
	  * updated accordingly

	M: tests/Makefile.am:
	  * added `timer' to `$(check_PROGRAMS)'
	  * improved comments for the defintion of `$(check_SCRIPTS)'

	M: configure.ac:
	  * added checks for standard C headers, with `AC_HEADER_STDC'
	  * added check on `<fcntl.h>'
	  * removed call to `AC_PROG_MKDIR_P' and `AC_PROGRAM_INSTALL': the checks
	    are already performed by `AM_INIT_AUTOMAKE'
	  * added checks neeed for tests/timer.c:
	      - AC_HEADER_SYS_WAIT
	      - <signal.h>
	      - alarm()
	      - signal()
	      - sigaction()

2009-09-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improve run_CMD() in tests/defs.in (usage changed)

	M: tests/defs.in:
	  * modified usage of `run_CMD()': from
	     - run_CMD COMMAND [-e STATUS] [-i FILE] [-m] [--] [ARGUMENTS..]
	    to:
	     + run_CMD [-e STATUS] [-i FILE] [-m] [--] COMMAND [ARGUMENTS..]
	  * removed definition of subroutine `run_F77()': better to use
	    `run_CMD $F77 ...' instead
	  * removed definition of subroutine `run_RATFOR()': better to use
	    `run_CMD "$RATFOR" ...' instead

	M: tests/*.test:
	  * adjusted accordingly
	  * other minor (mostly cosmetic) changes

2009-09-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added new tests

	A: tests/break-fail.test:
	A: tests/next-fail.test:
	A: tests/break-next-fail.data:
	  * new tests, with their shared data file

	A: tests/break_f77.test:
	A: tests/next_f77.test:
	A: tests/switch-fail-no-braces.test:
	  * new tests

	A: tests/switch-fail.test:
	  * new test, still xfailing

	M: tests/Makefile.am:
	  * updated accordingly

2009-09-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring (renaming functions)

	M: src/codegen.c:
	M: src/io.c:
	M: src/io.h:
	M: src/mklexer.sh:
	M: src/parser.c:
	M: src/tokenizer.c:
	M: src/tokenizer.h:
	  * function renaming:
	      - gnbtok() -> get_nonblank_token()
	      - gettok() -> get_token()
	      - gtok() -> get_raw_token()
	      - skpblk() -> skip_blanks()
	      - pbstr() -> put_back_string()
	      - putbak() -> put_back_char()
	      - type() -> char_type()
	      - relate() -> convert_relation_shortand()
	  * other minor related and unrelated improvements
	  * comments added/removed/improved as appropriate

2009-09-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	configure: enable all possible compilers warnings

	M: configure.ac:
	  * Added code to enable many warnings in the C compiler; this is done
	    by checking which of the typical warning-enabling options work for
	    the current C compiler, and adding them to CFLAGS. This is done
	    using the new macro `RAT4_CACHE_CHECK_CC_FLAG', defined in new file
	    `m4/rat4_c_check_flag.m4'
	  * Removed special handling of checks on `vfprintf' function (were done
	    with ad-hoc macro `RAT4_CHECK_FUNC_NO_WERROR'): this is no more
	    necessary with the changes done in `configure.ac' and `maint.mk'.

	A: m4/rat4_check_cc_flag.m4:
	  * new file, contains definition of macro `RAT4_CACHE_CHECK_CC_FLAG', and
	    of auxiliary macro `_RAT4_CHECK_CC_FLAG'

	D: m4/rat4_check_func_no_werror.m4:
	  * deleted, the macro it defined (`RAT4_CHECK_FUNC_NO_WERROR') is no more
	    needed

	M: maint.mk:
	  * in the definition of `$(strict_distcheck_configure_flags)' (contains
	    command line arguments for ./configure as called in the target
	    `strict-distcheck'):
	     - removed addition of `-Wall', `-Werror' etc. to CFLAGS: those flags
	       are already added to CFLAGS by configure (if the compiler supports
	       them)
	     - removed addition of `-Wall' and `-Werror' to FFLAGS: they weren't
	       used
	     - in fact, `$(strict_distcheck_configure_flags)' is now empty, but
	       this might change in the future, so we're leaving its definition
	       and related comments in place

2009-09-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improve handling of statement labels

	M: src/parser.c:
	  * improved `parse()' so that it catches and report unusual errors; it
	    does so by callng the ...
	  * new subroutine `detect_unusual_errors()'

	A: tests/label-line-continuation.test:
	A: tests/label-line-continuation_f77.test:
	A: tests/label-fail-empty-statement.test:
	A: tests/label-fail-misplaced-paren.test:
	A: tests/label-fail-unexpected-eof.test:
	  * new tests

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	go towards fortran77 (done)

	Since fortran77 is ubiquitous now, and fortran66 almost forgotten,
	we are going to make ratfor output fortran77 code; this will give use
	e.g. better builtin support for strings and characters, and a decent
	if construct with `if/then/else/endif'.

	M: NEWS:
	  * updated accordingly ("generating Fortran 77 code")

	M: src/codegen.c:
	  * BUGFIX: added definition of constant string `selse[]'
	  * BUGFIX: make subroutine `ifthenc()' output properly balanced
	    parenthesis
	  * fix: removed unsed constant string `sdata[]'
	  * fix: removed extra railing space from definition of constant string
	    `sgoto[]'
	  * removed conditional code which was considered only when `F77' macro
	    was undefined
	  * other related changes
	  * nitpicks: in some places: use more idiomatic C

	M:  src/parser.c:
	  * removed conditional code which was considered only when `F77' macro
	    was undefined

	A: tests/no-fortran66-if.test:
	A: tests/no-fortran66-while.test:
	  * new tests, check that ratfor does not generate fortran66 code when
	    better fortran77 code can be generated instead

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fix minor typo in a testcase

	M: tests/switch_f77.test:
	  * fixed minot typo: name of created test program must be `testswitch',
	    not `testfor'

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tiny fix in testsuite

	M: tests/no-string-directive.test:
	  * tiny bugfix: do not use `CMD1 && CMD2' to stack commands, but rather
	    `CMD1; CMD2', so that `set -e' can act more effectively

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	nitpick in testcase

	M: no-double-quotes.test:
	  * use $FGREP, not $GREP, since we have to check for a literal string,
	    not for a regexp

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	go towards fortran77: no more `string' directive

	Since fortran77 is ubiquitous now, and fortran66 almost forgotten,
	we are going to make ratfor output fortran77 code; this will give use
	e.g. better builtin support for strings and characters, and a decent
	if construct with `if/then/else/endif'.

	Fortran 77 has quite extensive builtin support for string manipulations,
	so that we don't need the hackish directive `string' anymore to do string
	initialization.

	M: NEWS:
	  * updated accordingly ("string directive is no more recognized")
	  * some minor fixings an nitpicking in older news

	M: src/codegen.c:
	  * removed no more needed global constant string `eoss[]'
	  * removed function `strdcl()'

	M: src/parser.c:
	  * removed recognization of toke type `LEXSTRING' and subsequent call
	    of `strdcl()' function

	M: src/mklexr.c:
	  * removed `string' from the list of ratfor keywords, and `LEXSTRING'
	    from the list of valid token types

	M: src/lex-symbols.h:
	  * removed `LEXSTRING' from the list of valid token types
	  * minor fix in comment (s/this three macros/this four macros/)

	A: tests/no-string-directive.test:
	  * new test, check that the `string' directive is no more recognized

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix w.r.t. bool support in rat4-common.h

	M: src/rat4-common.h:
	  * BUGFIX: fixed botched typedef to alias `bool' to `_Bool':
	     - s/typedef bool _Bool/typedef _Bool bool/
	  * BUGFIX: add #definition of `true' and `false' is `_Bool' is present
	    but `stdbool.h' is not

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new testcase (on switch statement)

	A: tests/switch_f77.test:
	  * new testcase (on switch statement)

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	use booleans in C code

	M: configure.ac:
	  * check for booleans support in C compiler (with `AC_HEADER_STDBOOL')

	M: src/rat4-common.h:
	  * new code to have decent support fo booleans ven when <stdbool.h> is
	    not present

	M: src/codegen.c:
	M: src/labgen.c:
	M: src/labgen.h:
	M: src/main.c:
	M: src/tokenizer.c:
	M: src/utils.c:
	M: src/utils.h:
	M: src/xopen.c:
	  * code modified accordingly(also function declarations, since now we
	    have a new type `bool'

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new tests on `return' statement

	M: tests/return.test:
	M: tests/return_f77.test:
	  * new test cases

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	rename static global vars in tokenizer.c

	M: src/tokenizer.c:
	  * given better names to global static constatnts strings:
	     - incl => KEYWORD_INCLUDE
	     - fncn => KEYWORD_FUNCTION
	     - defn => KEYWORD_DEFINE

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	rename global var: fcname => current_function_name

	M: src/init.c:
	M: src/tokenizer.c:
	M: src/rat4-global.h:
	M: src/codegen.c:
	  * global variable `fcname' renamed with a clearer name
	    `current_function_name'

2009-09-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring (new file init.c)

	A: src/init.c:
	A: src/init.h:
	  * new files, code/declarations to initialize the preprocessor state

	M: src/parser.c:
	M: src/parser.h:
	  * initializing code (subroutine `init()') moved out to `init.c'
	  * related semplifications

	M: src/main.c:
	  * now it must include include "init.h" too

	M: src/Makefile.am:
	  * added new files `init.c' and `init.h' to $(ratfor_SOURCES)

2009-09-14  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved test about command line usage

	M: usage-option-missing-argument.test:
	  * test extended: check also the option `-l' (not only `-o')

2009-09-14  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring (tokenizer.c)

	M: src/tokenizer.c:
	  * new functions `push_file_stack()' and `pop_file_stack()',
	    used in function `gettok()'

2009-09-14  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved diagnostic about I/O error on input files

	M: src/parser.c:
	M: src/tokenizer.c:
	  * on I/O failures opening input files (either from command line or
	    `include' statement), be more detailed in error messages (use
	    the new subroutine `xopen()' defined in new file `xopen.c' to do
	    so).
	  * include "xopen.h"
	  * also fails if the master input file is a directory (previously this
	    was not the case

	A: src/xopen.c:
	A: src/xopen.h:
	  * new files: contain wrapper functions for `fopen()' using `errno' and
	    `strerror()' to report errors, plus other bells and whistles

	M: src/Makefile.am:
	  * added `xopen.c' and `xopen.h' to $(ratfor_SOURCES)

	NEWS:
	  * updated accordingly

	A: tests/infile-unreadable-fail.test:
	A: tests/infile-nonexistent-fail.test:
	A: tests/infile-directory-fail.test:
	A: tests/include-fail-unreadable-fail.test:
	A: tests/include-fail-nonexistent-fail.test:
	A: tests/include-fail-directory-fail.test:
	  * new tests

	D: tests/include-fail.test:
	  * removed: splitted in new test scripts

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-12  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improving diagnostic for uncorrect ratfor usage

	M: src/main.c:
	  * new subroutine `usage_error()'
	  * variable `progname' made global (and static)
	  * correctly complains if given more than one argument, instead of
	    silently discarding all the extra arguments
	  * improved option parsing: set `opterr' to 0, so that we can -- and
	    do -- write our own messages on unrecognized/wrong options errors
	  * in option parsing code: POSIX says that getopt() signal end of
	    parsing returning `-1', not `EOF' (which, by the way, is usually
	    `-1'), so look for `-1' rather than for `EOF'

	M: tests/defs.in:
	  * new variable `$ratfor_rx', holding the name of the ratfor program
	    used in the tesuite *with grep metacharacters escaped*; this
	    variable is used in the new test scripts

	A: tests/usage-option-unknown.test:
	A: tests/usage-option-missing-argument.test:
	A: tests/usage-too-many-args.test:
	  * new tests

	M: NEWS:
	  * updated accordingly

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-12  Stefano Lattarini  <stefano.lattarini@gmail.com>

	some tests about outfile made stricter

	M: outfile-cantcreate-fail.test:
	M: outfile-directory-fail.test:
	M: outfile-unwritable-fail.test:
	  * be stricter in the check on the expected error messages from ratfor

2009-09-12  Stefano Lattarini  <stefano.lattarini@gmail.com>

	nitpicks

	M: src/rat4-common.h:
	  * include the <stdlib.h> header
	  * define E_USAGE to 2

	M: src/main.c:
	  * do not include the <stdlib.h> header anymore: it is already included
	    by rat4-common.h
	  * use EXIT_SUCCESS, EXIT_FAILURE and E_USAGE instead of 0, 1 and 2 as
	    arguments to `exit()'

	M: src/error.c:
	  * do not include the <stdlib.h> header anymore: it is already included
	    by rat4-common.h
	  * use EXIT_SUCCESS and EXIT_FAILURE instead of 0 and 1 as arguments to
	    `exit()' and as values of `exit_status'

	M: src/tokenizer.c:
	M: src/lookup.c:
	  * do not include the <stdlib.h> header anymore: it is already included
	    by rat4-common.h

	M: src/codegen.c:
	  * do not include the <stdlib.h>, <stdio.h> and <string.h> headers
	    anymore: they are already included by rat4-common.h

	M: src/utils.c:
	  * do not include the <stdlib.h> and <string.h> headers anymore: they
	    are already included by rat4-common.h

2009-09-12  Stefano Lattarini  <stefano.lattarini@gmail.com>

	ratfor: deal better with output file (`-o' option)

	M: src/main.c:
	  * when option `-o' is read by the ratfor option parse, do not try to
	    immediately open the given  file for writing, just save its name to
	    open it later; this way, if ratfor is called as e.g.:
	      ratfor -o OUTFILE1 -o OUTFILE2
	    output is written to OUTFILE2, without unnecessarily clobbering
	    the content of OUTFILE1.
	  * improved error messages for `-o': e.g. when outfile is a directory,
	    do not simply fail with the message:
	      "outfile: cannot open for writing"
	    but with the more precise message:
	      "outfile: cannot open for writing: Is a directory"
	  * `-o -' now tell ratfor to write outout to standard output

	M: src/error.h:
	  * include `errno.h' (for `errno' variable) and `string.h' (for
	    `strerror()' function) unconditionally

	M: NEWS:
	  * updated accordingly

	A: tests/outfile-cantcreate-fail.test:
	A: tests/outfile-dash-is-stdout.test:
	A: tests/outfile-devnull.test:
	A: tests/outfile-directory-fail.test:
	A: tests/outfile-no-multi-clobber.test:
	A: tests/outfile-overwrite.test:
	A: tests/outfile-no-useless-overwrite.test:
	A: tests/outfile-unwritable-fail.test:
	A: tests/outfile.test:
	  * new tests

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-12  Stefano Lattarini  <stefano.lattarini@gmail.com>

	version bumped to 1.0i

	M: configure.ac:
	  * in AC_INIT: package version bumped: 1.0h => 1.0i

2009-09-12  Stefano Lattarini  <stefano.lattarini@gmail.com>

	release 1.0i (NEWS: cite increased test coverage)

	M: NEWS:
	  * explicitly tell that testsuite coverage hase been quite increased,
	    with many new tests added
	  * mark the latest release as 1.0i

2009-09-12  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixing testsuite README w.r.t. zsh3

	M: tests/README:
	  * We stated that zsh must be called with option `--no-function-argzero'
	    to have it working with our testsuite.  But apparently, versions 3.x
	    of zsh does silently discard that option (sigh!); however, luckily
	    enough, they accept the format `-o no_function_argzero'.  So now we
	    state that zsh must be called with the `-o no_function_argzero' to
	    have it working with our testsuite.

2009-09-12  Stefano Lattarini  <stefano.lattarini@gmail.com>

	disabled case folding for input

	Modern fortran compilers are case-insensible, but do not barf on mixed-case
	input, so the conversion to lowercase done by ratfor was useless.  Well, it
	was worse than that, since it caused some subtel problems.  So we disable
	the folding-to-lowercase functionality of ratfor.

	M: src/lex-symbols.h:
	  * new lexical type `STRING'

	M: src/tokenizer.c:
	  * in subroutine `deftok()': remove calls to `fold()' to convert the
	    token read in to lowercase
	  * in function `gtok()': return STRING if the token read is a string

	M: src/utils.c:
	M: src/utils.h:
	  * function `fold()' removed

	A: tests/case-sensibility-basic.test:
	A: tests/include-no-uppercase-alias.test:
	  * new tests

	M: tests/include-abspath.test:
	  * slighty simplified

	M: tests/define-case-sensibility.test:
	M: tests/define-no-uppercase-alias.test:
	M: tests/define-nested.test:
	M: tests/define-multiline.test:
	M: tests/define-multiline-with-comment.test:
	M: tests/define-redefine.test:
	M: tests/include-basic.test:
	M: tests/include-nested.test:
	M: tests/include-nested-deep.test:
	M: tests/include-stress.test:
	M: tests/include-defined.test:
	M: tests/define-basic_f77.test:
	   * updated: account for the ratfor's just acquired case-sensibility

	M: tests/defs.in:
	  * removed now useless subroutines `tolower()', `toupper()' and `getstr()'

	M: tests/Makefile.am:
	  * removed from $(XFAIL_TESTS) the following tests, which now work:
	     - include-case-sensible.test
	     - define-no-uppercase-alias.test
	     - define-case-sensibility.test
	  * added new tests `include-no-uppercase-alias.test' and
	    `case-sensibility-basic.test' to $(ALL_TESTS)

	M: NEWS:
	  * Tell that now ratfor is fully case-sensible w.r.t. both input and
	    output, and relies on the fortran compiler being case-insensible
	    (in the right way of course, e.g. the string constant must be
	    case-sensible and the variables identifiers must not).
	    This fixes an handful of long-standing bugs.

	M: BUGS:
	  * Removed corrected bugs (in this or previous checkins):
	     - "the `include' statement coerce the name of the file to include
	        to lowercase"
	     - "the builtin `define' is case-insensible w.r.t. symbol names"
	     - "lines starting with `%'  should be copied verbatim, but are are
	        still subjected to line wrapping"

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in testsuite

	M: tests/include-case-sensible.test:
	  * fixed stupid bugs

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new test, xfailing (include is case sensible)

	A: tests/include-case-sensible.test:
	  * new test, check that the builtin `include' is case-sensible w.r.t.
	    the filename

	M: tests/Makefile.am:
	  * $(ALL_TESTS) and $(XFAIL_TESTS) updated accordingly

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	cosmetic fix in testsuite

	M: tests/include-basic.test:
	  * removed useless call to `set -x' (lefteover of a precedent version of
	    include-basic.test, where we temporarly called `set +x')

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	extending parser stack depth, new related tests

	M: src/parser.c:
	  * stack depth increased to 1024 (was 100)

	A: tests/stmt-stack-stress_f77.test:
	  * new test

	M:tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved testsuite w.r.t. f77 compiler

	M: tests/defs.in:
	  * new subroutine `require_string_fortran_compiler()', checking that the
	    fortran compiler in $F77 does not have silly limits, and skipping the
	    testcase if this check fails

	M: tests/long-infile_f77.test:
	  * use `require_string_fortran_compiler()' instead of an hackish, ad-hoc
	    rejection of fort77

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring

	M: src/parser.c:
	  * new static global variables `sp', `labval[]' and `lextyp[]', to ease
	    communiaction between `parse()' and `unstak()'
	  * ptototype of and calls to `unstak()' modifid accordingly

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new tests

	A: tests/if_f77.test:
	A: tests/ifelse-ambiguity_f77.test:
	  * new tests

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring

	M: src/parser.c:
	  * use switch statements were possible, instead of long if/elsif/else

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	extended gitignore

	M: .gitignore:
	  * added src/lexer.c (it is now automatically generated)

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	making some ratfor sources autogenerated

	A: src/mklexer.sh:
	D: src/lexer.c:
	  * files lexer.c is now autogenerated by script mklexer.sh

	M: src/Makefile.am:
	  * added rule to generate lexer.c
	  * lexer.c is now added to $(nodist_ratfor_SOURCES), not to
	    $(ratfor_SOURCES)

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new tests

	A: tests/for_f77.test:
	A: tests/forever_f77.test:
	A: tests/goto_f77.test:
	A: tests/nested-loops_f77.test:
	A: tests/repeat-until_f77.test:
	A: tests/repeat-without-until.test:
	A: tests/repeat-without-until_f77.test:
	A: tests/while_f77.test:
	  * new tests

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-11  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved wording in NEWS

	M: NEWS:
	  * improved wording w.r.t. effects of running GNU make in the uconfigured
	    ratfor tree

2009-09-10  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved timer() function in testsuite

	M: tests/include-recursive.test:
	  * modified to adapt to the new timer() behaviour (introduced in the
	    previous checkin)
	  * fixed bug introduced in a previous checkin, and due to incomplete
	    conversion from old hand-done timing to timing done with `timer'

2009-09-10  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved timer() function in testsuite

	M: tests/defs.in:
	  * timer(): now returns a meaningful exit status, depending on the
	    fact that the command succeded, failed or timed-out

	M: tests/comments-no-hang.test:
	  * modified to adapt to the new timer() behaviour

2009-09-10  Stefano Lattarini  <stefano.lattarini@gmail.com>

	nitpick

	M: tests/defs.in:
	  * tiny fixings & improvements

2009-09-10  Stefano Lattarini  <stefano.lattarini@gmail.com>

	testsuite refactoring and modularizing

	M: tests/defs.sh:
	  * new subroutine `timer()': run a command (in a subshell) until the
	    given time is expired, the terminate it.

	M: tests/comments-no-hang.test:
	M: tests/include-recursive.test:
	  * refactoring: rewritten to use `timer()' instead of doing things by
	    hand

2009-09-10  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new tests & related fixes

	M: src/tokenizer.c:
	  * distinguish between missing function name and invalid function name.

	A: tests/function-name-invalid.test:
	A: tests/function-name-missing.test:
	A: tests/function-return.test:
	A: tests/function-return_f77.test:
	A: tests/include-relpath.test:
	A: tests/label-conflict.test:
	  * new tests

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-10  Stefano Lattarini  <stefano.lattarini@gmail.com>

	typofix

	M: tests/include-missing-filename.test:
	  * typofix in comments: s/te/the/

2009-09-10  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring (renaming and moving constants)

	M: src/rat4-common.h:
	  * constant MAXNAME renamed as MAXFUNCNAME (holds the maximal length of
	    the name of a ratfor function)
	  * removed definitions of some constants:
	     - MAXSWITCH (required only in codegen.c)
	     - MAXFORSTK (required only in codegen.c)
	     - MAXDEF (required only in tokenizer.c)
	     - MAXSTACK (required only in parser.c )
	     - NFILES (required only rat4-global.h)
	     - MAXCHARS (required only in io.c)

	M: src/io.c
	  * moved in definitions of constant `MAXCHARS', removed from
	    `rat4-common.h' ("local" to `outnum()', renamed as `MAXCHARS_')

	M: src/parser.c:
	  * moved in definitions of constant MAXSTACK (max stack depth for
	    parser), removed from rat4-common.h

	M: src/rat4-global.h
	  * moved in definitions of constant `NFILES', removed from
	    `rat4-common.h' (holding max depth of file inclusions)

	M: src/codegen.c
	  * new constant MAXSTRNAME, holding the maximal length of a string name
	    (now it's equal to MAXFUNCNAME)
	  * moved in definitions of constants removed from rat4-common.h:
	     - MAXSWITCH (max stack for switch statement)
	     - MAXFORSTK (max space for for reinit clauses)

	M: src/tokenizer.c:
	  * new constant MAXPATH, holding the maximal length of the name
	    of a file included
	  * new constant MAXDEFLEN, holding the maximal length of a ratfor
	    macro's definition

	M: src/*.c:
	  * in general: other small refactoring and improvements

2009-09-09  Stefano Lattarini  <stefano.lattarini@gmail.com>

	relax some coding rules w.r.t. macro names

	M: HACKING:
	  * do not say anymore that macro names "must" be all uppercase, but that
	    they should, and only unless leaving them lowercase does not make the
	    code clearer.

2009-09-09  Stefano Lattarini  <stefano.lattarini@gmail.com>

	cosmetic change in io.c

	M: src/io.c:
	  * a small cosmetic change in whitespaces

2009-09-09  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring (improved names of variables)

	M: src/*.[ch]:
	  * Global variable `linect[]' (holding the stack of line number in the
	    files being read/included by ratfor) renamed to `lineno[]'

2009-09-09  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixed bug (possible segfault)

	M: src/tokenizer.c:
	  * BUGFIX: in subroutine: try to include file only if `level' is
	    < NFILES - 1, not even if it's == NFILES - 1 (this could cause
	    a segmentation fault)

2009-09-09  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring (improved names of variables)

	M: src/*.[ch]:
	  * Renamed global variable `leaveC' to `keep_comments': it's a clearer
	    and more expressive name, and it's consistent with our hacking rule
	    of not to have mixedCase names for variables.

2009-09-09  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring label-generating code

	Modularize and separate the (very simple) code to generate label
	numbers to be used in the generated fortran code.

	A: src/labgen.c:
	A: src/labgen.h:
	  * new files: contains the simple functions `set_starting_label()',
	    `labgen()' and `can_label_conflict()', and the static global variables
	    `label' ans `startlab' (previously program-global variables), used to
	    generate label numbers to be used in the output fortran code

	M: src/rat4-global.h:
	  * removed declaration of variables `label' and `startlab', no more as
	    program-global

	M: src/parser.c:
	  * include `labgen.h', since the `init()' function must set the initial
	    label number

	M: src/codegen.c:
	  * definition of function `labgen()' moved out (into `labgen.c')
	  * include `labgen.h', since we need the `labgen()' function defined in
	    `labgen.c'

	M: src/Makefile.am:
	  * modified accordingly: added `src/labgen.c' and `src/labgen.h' to
	    $(ratfor_SOURCES)

2009-09-08  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring w.r.t. vars global to whole program

	M: src/rat4-global.h:
	  * removed declaration of variables `swtop', `swlast', `fordep', `xfer',
	    `swstak[]', `forstk[]': they are used only in codegen.c!

	M: src/parser.c:
	  * in init: remove initialization of no more program-global variables
	    `swtop', `swlast' and `fordep',

	M: src/codegen.c:
	  * added declaration of global variables `swtop', `swlast', `fordep',
	    `xfer', `swstak[]', `forstk[]': they were previously global to the
	    whole program, but since, after our refactoring, they are used only
	    in  codegen.c, we declare them as static.

2009-09-08  Stefano Lattarini  <stefano.lattarini@gmail.com>

	minor rewording

	M: HACKING:
	  * minor rewording

2009-09-08  Stefano Lattarini  <stefano.lattarini@gmail.com>

	minor improvement in C source

	M: src/main.c:
	  * removed unneded `#include <stdio.h>': stdio.h is already included by
	    src/rat4-common.h, which is included by srcmani.c

2009-09-08  Stefano Lattarini  <stefano.lattarini@gmail.com>

	HACKING: more about C coding standards

	M: HACKING:
	  * tell to avoid mixedCase and CamelCase
	  * tell when to use UPPERCASE for identifiers/functions/macros
	  * tell to (usually) avoid typedefs

2009-09-08  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring w.r.t. vars global to whole program

	M: src/rat4-global.c:
	  * now the staack of names of inlcuded files, filenames[], expects
	    its members to be `const char*', not just `char*'

	M: src/parser.c:
	M: src/parser.h:
	  * accordingly, the third argument of `init()' is now a `const char*',
	    not just a `char *'

	M: src/tokenizer.c:
	  * related change: in a call to free: cast pointer to (void *) to
	    avoid useless warnings from the compiler

2009-09-08  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring w.r.t. vars global to whole program

	Initilization of global variables moved from `main.c' to `parse.c'

	M: src/main.c:
	  * function `init()' moved from this file to `parse.c'
	  * removed inclusion of "rat4-global.h"

	M: src/parser.c:
	  * definition of function `init()' moved in this file
	  * added inclusion of "rat4-global.h"

	M: src/parser.h:
	  * added prototype for `init()'

2009-09-08  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring w.r.t. vars global to whole program

	M: src/rat4-global.h:
	  * removed unused variables `nfiles', `avail' and `tabptr[]'

	M: src/main.c:
	  * in subroutine `init()': removed initialization of unused variable
	    `tabptr[]'

2009-09-08  Stefano Lattarini  <stefano.lattarini@gmail.com>

	use "(stdin)", not "-", in err mesgs w.r.t. stdin

	M: src/main.c:
	  * in subroutine `init()': if input filename is "-" (which means standard
	    input), use "(stind)" in error messages, not "-"
	  * in subroutine `init()': cosmetic changes w.r.t. variable names

	A: tests/synerr-stdin.test:
	  * new test, check the new behaviour w.r.t. synerr messages regarding
	    standard input

	M: tests/Makefile.am:
	  * updated accordingly

2009-09-08  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring configure.ac

	A: m4/ratfor_check_func_no_werror.m4:
	M: configure.ac:
	  * The not-so-simple code to check for the `vfprintf()' C functions
	    without clashing with the `-Werror' flag of gcc has been moved
	    from main code in `configure.ac' to proper macro
	    `RAT4_CHECK_FUNC_NO_WERROR()' in `m4/ratfor_check_func_no_werror.m4'.

2009-09-08  Stefano Lattarini  <stefano.lattarini@gmail.com>

	error functions: improved, made variadic

	M: src/error.c:
	M: src/error.h:
	  * old function `error()' renamed to `fatal()'
	  * new function `fatal()': made variadic (accept variable number of
	    arguments, a' la' printf)
	  * function `baderr()' renamed to `synerr_fatal()'
	  * function `synerr_inc()' renamed to `synerr_include()'
	  * functions  `synerr(), `synerr_include()', `synerr_fatal()' made
	    variadic; this required some new hackish macros:
	     - SYNERR_PREAMBLE()
	     - SYNERR_POSTAMBLE()
	     - SYNERR_POSTAMBLE_VARIADIC()
	     - SYNERR_PRINTERR_VARIADIC()
	  * added inclusion of <stdarg.h> (required to define variadic functions)
	  * removed inclusion of <stdiog.h> (already included by `rat4-common.h')

	M: src/main.c:
	  * modified to reflect the renaming `error()' => `fatal()'

	M: src/codegn.c:
	M: src/io.c:
	M: src/parser.c:
	  * modified to reflect the renaming `baderr()' => `synerr_fatal()'

	M: src/tokenizer.c:
	  * modified to reflect the renamings `baderr()' => `synerr_fatal()'
	    and `synerr_inc()' => `synerr_include()'

	M: configure.ac:
	  * added check for function `vprintf()' (with `AC_CHECK_FUNCTION',
	    and with an hack since the check blow up without any real reason
	    if CFLAGS contains `-Werror')
	  * added check for function `strerror()' (with `AC_CHECK_FUNCTION')
	  * added check for header `errno.h' (with `AC_CHECK_HEADER')

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	configure.ac added checks for `const' and `inline'

	M: configure.ac:
	  * added calls to AC_C_CONST (check support for C `const' qualifier)
	    and AC_C_INLINE (check support for C `inline' qualifier)
	  * some minor cosmetic changes to comments

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improving diagnostic for `include' (consistency)

	M: src/tokenizer.c:
	  * In function `gettok()': adapt to the new semantic of the `inc_synerr()'
	    in `error.c'; this in turn improved diagnostic for builtin `include',
	    by giving to all the error messages dispalyed in case of failure of the
	    `include' builtin the format:
	      "include: ERR-MSG [: DETAILS]",
	    for consistency .

	M: src/error.c:
	  * Subroutine `inc_synerr()': always print an error message with of form
	      "include: ERR-MSG [: DETAILS]".
	    This involves an hack which will go away once we'll have turned the
	    errors functions into variadic errors.

	M: tests/include-fail.test:
	  * Modified to account for the new diagnostic.

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	cosmetic fix (coding statndards)

	M: src/utils.c:
	  * tiny fix to better respect our coding standards: in `do/while' loop:
	    keep the `while' on the same line of the closing brace for the `do'.

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	typofix

	M: src/io.c:
	  * improved wording in comments into `outasis()':
	      s/line floding/line wrapping/

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improving diagnostic for `include' (missing arg)

	M: src/tokenizer.c:
	  * in function `gettok()': improved diagnostic for builtin `include': if
	    no file name is given, complains with `missing filename' rather than
	    with a generic `open failed'

	M: tests/Makefile.am:
	  * `include-missing-filename.test' removed from $(XFAIL_TESTS): it works
	    now

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	testsuite slighty extended

	A: tests/include-cornercase.test:
	A: tests/include-missing-filename.test:
	  * new tests

	M: tests/include-fail.test:
	  * cosmetic change in comments

	M: tests/Makefile.am:
	  * updated accordingly (also, `include-missing-filename.test' temporarly
	    added to `$(XFAIL_TESTS)', as it does not work yet).

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	small improvement in testsuite

	M: defs.in:
	  * removed definition of subroutine `NOT()': it's not used, and it's
	    practically useless
	  * improved/fixed shorts usage description for subroutines `run_RATFOR()'
	    and `run_F77()'

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tinu change in testsuite (comments)

	M: tests/comments-no-hang.test:
	  * added a comment explaining why we have to use `$RATFOR' and not
	    `run_RATFOR'

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improvements in testsuite

	M: tests/defs.in:
	  * Subroutine `run_CMD()' improved and extended.
	     1. New valid value "FAIL" for expected exit status, meaning that
	        every exit status of COMMAND *but 0* is acceptable.
	     2. New option `-m': save both stdout and stderr of COMMAND into the
	        same file, rather than into two separate files.
	     3. Do not try to save/restore value of the `xtrace' shell setting
	        anymore: we can safely assume that `set -x' is always active out
	        of run_CMD(), and must remain so.
	     4. Now also the stderr of COMMAND is displayed on stdandard output,
	        no more on standard error
	     5. Description and comments modified accordingly, and improved in
	        other aspects too.
	  * In subroutine `run_RATFOR()': quote the $RATFOR variable when used as
	    argument to run_CMD() (this is nedded, since the semantic of run_CMD()
	    does not allow it to expand to more than one token)

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	small improvements in testsuite

	M: tests/include-defined.test:
	M: tests/integers-many-bases.test:
	M: tests/integers-many-bases_f77.test:
	  * removed counterproductive calls to `set +x': better to be always
	    verbose
	  * be more verbose where necessary (e.g. displaying content of more files
	    used in the test)
	  * other minor related changes

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	remove alias `DEFINE' for `define' (incomplete)

	M: src/tokenizer.c:
	  * in subroutine `deftok()': do not consider anymore `DEFINE' (all
	    uppercase) as an alias for `define' (this does only half-work, due
	    to case folding of output chars being done at the wrong time)
	  * removed global constant string `bdefn[]', no more needed
	  * in some places: cosmetic fixes in spacing

	M: tests/define-basic.test:
	  * updated acordingly: do not expect anymore that `DEFINE' acts
	    like the `define' builtin

	A: tests/define-no-uppercase-alias.test:
	  * new test: check that `DEFINE' does *not* act like the `define' builtin
	  * NOTE: this test still fails; this is due to the folding to lowercase of
	    output characters done at the wrong time -- a problem which is causing
	    many others failures and bugs, and that will be hopefully fixed soon.

	M: tests/Makefile.am:
	  * added `define-no-uppercase-alias.test' to $(ALL_TESTS) an $(XFAIL_TESTS)

	M: NEWS:
	  * updated accordingly (with a big WARNING)

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tiny improvement in testsuite

	M: tests/define-redefine.test:
	  * slighty extended and improved

2009-09-07  Stefano Lattarini  <stefano.lattarini@gmail.com>

	maint.mk: accept to run submakes with non-GNU make

	M: maint.mk:
	  * New macro $(is_gnu_make): "yes" if $(MAKE) is GNU make, "no" otherwise.
	    This macro exists because now we eccept the possibility that the user
	    can override $(MAKE) from the command line (mostly for testing
	    purposes).
	  * Modified the definition of macro $(xmake) (used to do recursive calls
	    to make in e.g. the `strict-distcheck' target): now it uses the option
	    `--no-print-directory' only if $(MAKE) is GNU make.

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in checks for consistency of tests' list

	M: tests/CheckTestsList.am:
	  * BUGFIX: fixed portability problem (to Solaris /bin/sh): in target
	    `check-list-of-tests': in code to disable localization: use:
	     + LC_ALL=C; export LC_ALL=C
	    not:
	     - export LC_ALL=C
	  * in target `check-list-of-tests': improved code to disable localization:
	    set also environment variables `LANG' and `LANGUAGE' to `C'

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved wording in tests/README

	M: tests/README:
	  * improved wording in the description of the zsh bug regarding the
	    `xtrace' functionality

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix: `-C' switch works again

	M: src/tokenizer.c:
	  * refactoring: improved code modularity w.r.t. comment handing: new
	    subroutine `dispatch_comment()' (used in `gtok()')
	  * BUGFIX: in `gtok()': make sure that when we found a comment, we
	    always return `NEWLINE' as token type for the lexer

	A: tests/comments-no-hang.test:
	  * new test, test regression against the just-fixed bug

	M: tests/keepcomment_f77.test:
	  * test re-enabled & slighty extended

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in testsuite (w.r.t. `-C' ratfor switch)

	M: tests/keepcomment.test:
	  * BUGFIX: we ought to test the `-C' ratfor switch here, but we called
	    `ratfor' without that switch! Fixed.
	  * Related changes and fixings

	M: tests/keepcomment_f77.test:
	  * BUGFIX: we ought to test the `-C' ratfor switch here, but we called
	    `ratfor' without that switch! Fixed.
	  * Test temporarly disabled: it triggers a bug in ratfor, making it hang.
	    It will be re-enabled once fix the bug is fixed.

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	cosmetic fix in output

	M: src/io.c:
	  * modified `outcmnt()' so that it marks generated comments with a
	    leading `C' (uppercase) rather than a leading `c' (lowercase)

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in line continuation with `_'

	M: src/io.c:
	  * BUGFIX: in ngetc(): now it accepts also two or more *consecutive* line
	    continuations

	M: tests/line-continuation-stress2.test:
	  * modified to check also if two or more *consecutive* line continuations
	    are accepted

	M: tests/Makefile.am:
	  * removed `line-continuation-multiple.test' from $(XFAIL_TESTS): it
	    works now that we have fixed ngetch() in io.c

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved comments in testsuite common defs

	M: tests/defs.in
	  * extended, improved & fixed comments & documentation about the
	    `run_CMD()' subroutine

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improving tests for line continuation with `_'

	D: tests/underscore.test:
	A: tests/line-continuation-basic.test:
	A: tests/line-continuation-stress1.test:
	A: tests/line-continuation-stress2.test:
	A: tests/line-continuation-multiple.test:
	  * tests on `_' as character for line continuation extended and splitted
	    in three files rather than in just one

	D: tests/underscore_f77.test:
	A: tests/line-continuation_f77.test:
	  * renamed

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly
	  * added `line-continuation-multiple.test' to $(XFAIL_TESTS) (this is due
	    to a simple bug in io.c:ngetch(), which will be fixed soon)

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in testsuite

	M: tests/verbatim-stress_f77.test:
	  * BUGFIX: in tested ratfor code: added forgotten initialization of
	    variable `sum' (this missing initilization did not cause a bug
	    with fort77, which automatically initialized the variable to 0,
	    but it caused gfortran to fail or output gibberish).

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in testsuite

	M: tests/comments.test:
	  * BUGFIX: grep the expected reuslt in the file where the output of ratfor
	    was saved, not in the file containing its input!

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	simple typofix

	M: tests/comments.test:
	  * typofix: s/# thow me away/# throw me away/

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	FIX lineno in errmsg if multiline macros involved

	Fixed long-stading bug in the code which keeps track of line numbers: now
	the line count is no more messed up by expansion of multiline macros
	(created with the `define' builtin).

	M: src/rat4-common.h:
	  * Modified the function `is_newline(c)' so that it returns "true" also
	    if c is the special character `\007' (aka BEL).  This change, along
	    with the refactoring in previous checkin regarding the use of
	    `is_newline()' over hard-coded tests, AND the fix in `src/tokenizer.c'
	    (see below), let us treat null characters in input as newlines,
	    everywhere *but* in calculation of line numbers in input.
	    This should fix the lineno problem w.r.t. multiline macros.
	  * New function `is_strict_newline(c)': returns "true" only if c is the
	    newline character ('\n' aka ascii char number 10).
	  * new macro `FKNEWLINE'

	* src/io.c:
	   * in subroutines `ngetch()' and `putbak()': use `is_strict_newline()'
	     instead of `is_newline()', to have a correct count of line number
	   * new subroutines `putc_()' and `puts_()', which converts "bell"
	     character (ascii 007) into newlines before writeng them to output
	   * in subroutines XXX and XXX: use only putc_ to write to stdout, rather
	     than `printf()' or `putchar()'

	M: src/tokenizer.c:
	  * In function `deftok()': in the text pushed back after a macro
	    expansion: substitute the bell character '\007' (aka BEL) to any
	    newline, so that the line count will remain correct when the
	    pushed-back text will be re-read by ratfor.
	  * In function `getdeftok()':
	      - BUGFIX: `is_newline(c)', `is_blank(c)' etc. instead of hard-coded
	        tests like `c==NEWLINE' or `c==BLANK'
	      - some refactoring and cleanup

	M: tests/synerr-define-lineno.test:
	  * new test, check that the line numbers reported in ratfor error messages
	    remain correct even when expansion of multiline macro is involved

	M: tests/define-multiline-with-comment.test:
	  * new test, checks that multiline definitions works correctly even when
	    there are comments involved (this test avoid regressions related to
	    a bug that accurred in practice)

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

	M: NEWS:
	  * Updated: tell that now the line numbers in error messages should be
	    always correct, even when inclusion of files or expansion of multiline
	    macros are involved ( problems with file inclusion was fixed in a
	    previous checkin, while the problem with expansion of multiline macros
	    is fixed in the present checkin).

	M: BUGS:
	  * now explicitly state that ratfor does not work on binary input (and
	    might very well crash if feeded such an input)

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	refactoring w.r.t. input text

	M: src/rat4-common.h:
	  * New "inline" functions to determinare property of a character/token:
	     - is_blank(c)
	     - is_newline(c)
	     - is_stmt_ending(c)

	M: src/codegen.c:
	M: src/io.c:
	M: src/lexer.c:
	M: src/tokenizer.c:
	M: src/utils.c:
	  * refactoring: use new functions `is_blank()', `is_newline()' and
	    `is_stmt_ending()' instead of hard-coded statements (e.g.
	    `is_blank(c)' instead of `c == BLANK or C == TAB').

	A: tests/verbatim-stress_f77.test:
	  * new test

	A: tests/stress3_f77.test:
	  * new stress test, to make quite sure that the refactoring does not
	    break anything

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-05  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tiny change to a test

	M: tests/define-case-sensibility.test:
	  * tiny change: made slighty more verbose (more `cat' of input or output
	    files)

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in testcase

	M: tests/verbatim-stress.test:
	  * BUGFIX (we grepped standard input instead of output of ratfor!)
	  * BUGFIX: akin to s/define x,y)/define(x,y)/
	  * BUGFIX: fixed typos and stupid mistakes probably due to
	    absent-mindedness mistakes, which broke the script.
	  * NOTE: this test is still xfailing, and probably for good reasons.
	    We need more in-depth examinations and a better understanding of
	    the ratfor codebase.

2009-09-06  Stefano Lattarini  <stefano.lattarini@gmail.com>

	testcase renamed

	D: tests/stress-percent.test:
	A: tests/verbatim-stress.test:
	  * renamed

	M: tests/Makefile.am:
	  * modified accordingly

2009-09-05  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improving a testcase (still xfailing)

	M: tests/define-case-sensibility.test:
	  * improved: use diff between expected and got output rather than more
	    fragile fgrep searchs

2009-09-05  Stefano Lattarini  <stefano.lattarini@gmail.com>

	FIX lineno in errmsg from included files

	M: src/tokenizer.c:
	M: src/io.c:
	M: src/error.c:
	M: src/error.h:
	  * fixed an bug in the code keeping track of line numbers in included
	    files:
	      - linecount is now performed directly by ngetch() and putbak() (in
	        io.c), no more by gtok() (in tokenizer.c)
	      - in error.c: new subroutine synerr_inc()
	      - in error.h: new prototype for synerr_inc()
	      - in tokenizer.c: in gettok(): use synerr_inc() instead of synerr(),
	        where appropriate

	M: tests/synerr-include-lineno.test:
	  * test extended & improved

	M: tests/include-fail.test:
	  * BUGFIX: in tests on `tst2.r': we were erroneouslty look repeating checks
	    for `tst1.r'! Fixed this.
	  * BUGFIX: added check on `tst3.r' too (this test file was eritten, but
	    no test was performed on it!)

	D: tests/include-synerr.test:
	  * test removed, it overlapped with `synerr-include-lineno.test'

	M: tests/Makefile.am:
	  * `synerr-include-lineno.test' and `include_fail.test' removed from
	    $(XFAIL_TESTS): they work now!
	  * removed old test `include-synerr.test' from $(ALL_TESTS) and
	    `$(XFAIL_TESTS)'

	M: BUGS:
	  * removed description of bug preventing syntax errors from being signaled
	    from inside included files: it sorta solved itself in the hoverhauling
	    of ratfor

2009-09-05  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added new tests

	A: tests/verbatim-only-line-begin.test:
	A: tests/stress-percent.test:
	  * new tests (still xfailing)

	M: tests/Makefile.am:
	  * $(ALL_TESTS) and $(XFAIL_TESTS) updated accordingly

2009-09-04  Stefano Lattarini  <stefano.lattarini@gmail.com>

	cosmetic changes & a typofix

	M: src/lexer.c:
	M: src/tokenizer.c:
	  * cosmetic changes to code

	M: src/parser.c:
	  * typofix in error message: s/case of default/case or default/

2009-09-04  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new test (xfailing) for `%'-escaping

	A: tests/verbatim-in-define.test:
	  * new test

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly
	  * added new test to $(XFAIL_TESTS)

2009-09-04  Stefano Lattarini  <stefano.lattarini@gmail.com>

	maint.mk: improved deps of `strict-distcheck'

	M: maint.mk:
	  * now target `strict-distcheck' depends also on targets `all' and `check'

2009-09-04  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix w.r.t. `%'-escaping

	M: src/io.h:
	  * subroutine `outasis()': fixed so that it no more outputs an extra newline before copying
	    input verbatim

	A: tests/verbatim-no-extra-new-line.test:
	  * new test

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	C code: better use of `const', and some cleanups

	M: src/tokenizer.c:
	M: src/lookup.c:
	M: src/lookup.h:
	M: src/utils.c:
	M: src/utils.h:
	  * explicitly declare `const' strings which are not expected to be
	    modified

	M: src/lookup.c:
	  * added inclusion of `rat4-common.h'
	  * nitpick: in function `lookup()': use `STREQ(a1,s2)', not
	    `strcmp(s1,s2) == 0'
	  * typofix: modified declarations of functions `lookup()' and `install()'
	    so that it adheres to our conding standards, i.e. return type on a
	    line, function name and function arguments on the next line
	  * in function `install()':
	     - removed useless re-declaration of `lookup()'
	     - removed useless cast of malloc-returned pointer

	M: src/tokenizer.c:
	  * improved naming of arguments of `getdef()'

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	code simplification & cleanup

	M: src/lexer.c:
	  * removed uselessly convoluted code (maybe to do cruft accumulation?)
	     - removed global static variables `vdo[]', `vif[]' etc.
	     - global static variables `sdo[]', `sif[]' etc. made local to
	       subroutine  `lex()' -- they are used only inside there.
	     - in `lex()': use `LEXIF', `LEXDO' etc. directly instead of
	       `vif[0]', `vdo[0]' etc.

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	C more idiomatic & clean, remove cruft, add TODOs

	M: src/tokenizer.c:

	  * Removed some already commentd-out code (e.g. code to deal with `_'
	    as line continuator, which was commented out here since already
	    present in `ngetch()' in `io.c').

	  * In code to deal with strings in input: continue to use `_' as
	    a line continuator, but make it skip only *one* new line, many
	    newlines and blanks. This is for consistency with the code in
	    `ngetch()' (in `io.c').

	  * Removed some code placed in never-true `#ifdefs' constructs (e.g.
	    `#ifdef SQUAREB', which could be used to make `[' and `]' equivalent
	    resp. to `{' and `}')

	  * In functions `deftok()' and `gettok()': more idiomatic C.

	  * In fuction `relate()': use switch/case instead of long if/ifelse.

	  * Removed minor cruft about CRAY portability.

	  * Fixed (few) mangled indentations.

	  * A couple of warnings/todo added.

	  * Minor improvements to some comments.

	  * Other minor changes: made code snippets more clean and "K&R"-style.

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	ratfor source code: tidying up

	M: src/rat4-common.h:
	  * modified definitions of macros holding chars names: write them with
	    single-quote notation, e.g.:
	      #define NEWLINE '\n'
	    instead of by directly using their ASCCI value, as in:
	      #define NEWLINE 10
	  * removed unused symbols:
	      - APPEND
	      - CRLF
	      - CUTOFF
	      - DENSITY

	M: src/lex-symbols.h:
	  * added a comment saying that the vakues of
	  * other minor cosmetic changes in comments

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	maint.mk: improved strict-distcheck prereq. list

	M: maint.mk:
	  * now target `strict-distcheck' depends on target `distcheck'

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	ratfor source code: a nitpicking file renaming

	D: src/parse.h:
	A: src/parser.h:
	  * renamed

	D: src/parse.c:
	A: src/parser.c:
	  * renamed

	M: src/Makefile.am:
	M: src/parser.c
	M: src/main.c
	  * updated accordingly

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	ratfor source code: some file renamings

	D: src/rat4.h:
	A: src/codegen.h:
	  * renamed

	D: src/rat4.c:
	A: src/codegen.c:
	  * renamed

	M: src/Makefile.am:
	M: src/parse.c:
	  * updated accordingly

	M: configure.ac:
	  * mow used `src/rat4-common.h' instead of `src/rat4.c' as the
	    sentinel file

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	ratfor source code: tidying up

	D: src/ratdef.h
	A: src/rat4-common.h
	  * renamed
	  * also, it now #include <config.h> and <stdio.h>

	M: src/Makefile.am:
	M: src/error.c:
	M: src/io.c:
	M: src/lexer.c:
	M: src/lookup.c:
	M: src/main.c:
	M: src/parse.c:
	M: src/rat4-common.h:
	M: src/rat4-global.h:
	M: src/rat4.c:
	M: src/tokenizer.c:
	M: src/utils.c:
	  * updated accordingly

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	ratfor source code: tidying up

	D: src/ratcom.h
	A: src/rat4-global.h
	  * renamed
	  * also, it now #include "ratdef.h" (and no more include <stdio.h>,
	    which is already included by `ratdef.h')

	M: src/Makefile.am:
	M: src/error.c:
	M: src/main.c:
	M: src/rat4-global.h:
	M: src/rat4.c:
	M: src/tokenizer.c:
	  * updated accordingly

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	big refactoring: modularize, reorganize & clean

	Code moved around. New files and headers created. Added many many
	prototypes. Refactoring some code. Removing no more necessary `#include's.
	Other various minor changes. Too many to list them all. Sorry.

	M: src/rat4.c:
	  * subroutines `parse()', `unstak()' and related constant strings moved XXX
	    out to new file `parse.c'
	  * subroutines `lex()' moved out to new file `lex.c' XXX
	  * subroutine `init()' moved out to `main.c'

	M: src/rat4.h:
	  * removed declaration of subroutine `parse()' and `init()'
	  * added declarations for the many subroutines doing code generation,
	    used in `parse.c'.

	M: src/utils.h:
	M: src/ratdef.h:
	  * definition  of macro `STREQ' moved  from `utils.h' to `ratdef.h'

	D: src/main.h:
	  * removed, no more needed

	D: src/lex.h
	A: src/lex-symbols.h
	  * renamed

	M: src/lexer.h:
	M: src/lexer.c:
	  * new files

	M: src/parse.h:
	M: src/parse.c:
	  * new files

	M: src/io.h:
	  * added prototype of `outnum()'
	  * added inclusion of <stdio.h> (needed for *FILE, EOF, etc)

	M: src/main.c:
	  * include header `parse.h'
	  * do not include headers `rat4.h' and `main.h' anymore
	  * new subroutine `init()', moved in from `rat4.c'

	M: src/Makefile.am:
	  * $(ratfor_SOURCES) updated accordingly

	M: maint.mk:
	  * in rule `strict-distcheck': re-added '-Werror' to CFLAGS

2009-09-03  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved modularity of ratfor source code

	M: src/ratdef.h:
	  * definition of many constants moved out to more specific header files
	    (see below for more info)
	  * removed unused or no-more-used symbols:
	     - LIMIT
	     - LIM1
	     - LIM2
	     - MAXFNAMES
	     - MAXTBL
	     - HUGE
	     - BACKSPACE
	  * improved comment in the definiton of `RADIX'

	A: src/lex.h:
	  * new file, hold declaration of constants used by the lexer:
	     - LETTER
	     - DIGIT
	     - ALPHA
	     - LEXBREAK
	     - LEXDIGITS
	     - LEXDO
	     - LEXELSE
	     - LEXFOR
	     - LEXIF
	     - LEXNEXT
	     - LEXOTHER
	     - LEXREPEAT
	     - LEXUNTIL
	     - LEXWHILE
	     - LEXRETURN
	     - LEXEND
	     - LEXSTOP
	     - LEXSTRING
	     - LEXSWITCH
	     - LEXCASE
	     - LEXDEFAULT

	M: src/rat4.c:
	M: src/tokenizer.c:
	  * now include the header "lex.h"

	M: src/Makefile:
	  * $(ratfot_SOURCES) updated with the proper new `lex.h' file

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved some tests, added new tests, & fixes

	A: tests/include-recursive.test
	  * new test, check that recursive inclusion lead to error

	A: tests/define-stress_f77.test:
	  * new test, stress tests on define

	A: tests/define-long-name.test:
	  * new test, check definition of macros with long names

	A: tests/define-long-definition.test:
	  * new test, check definition of macros with long body

	A: tests/define-underscores.test:
	  * new test, check names of macros containing underscores (currently it's
	    not expected to pass)

	M: tests/define-basic.test:
	  * improved: now also checks that the stderr from ratfor is empty

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updaed accordingly
	  * testcase `define-underscores.test' added to $(XFAIL_TESTS): underscores
	    are not yet recognized as alphanumeric characters by ratfor

	M: src/ratdef.h:
	M: src/io.h:
	  * adjusted constants to make ratfor handle longer token, defs etc:
	     - MAXTOK: 132 => 512 (in ratcom.h)
	     - BUFSIZE: 512 => 2048 (in io.h)
	     - MAXDEF: 200 => 2048 (in ratcom.h)

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixes on "verbatim output" with `%'

	M: src/io.c:
	  * BUGFIX in function `outasis()': now realy copy input verbatim, without
	    even wrapping the output line (to prevent it from exceeding the maximum
	    line lenght allowed in valid fortran code)

	M: NEWS:
	  * updated accordingly

	M: tests/Makefile.am:
	  * removed `verbatim-long-line.test' from $(XFAIL_TESTS) (with the changes
	    that have been done to `io.c', it now works as expected)

	M: tests/verbatim-long-line.test
	  * typofixes (causing surious failures):
	     - s/tst.t/tst.r/
	     - s/tst1.r/tst.r/

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	cosmetic changes so two source files

	M: src/tokenizer.c:
	M: src/rat4.c:
	  * cosmetic changes

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new tests on "verbatim output" with `%'

	A: tests/verbatim.test:
	  * new test, check that a line starting with `%' is passed verbatim
	    into output

	A: tests/verbatim_f77.test:
	  * new test, check that a line starting with `%' is passed verbatim into
	    output, at least verbatim enough for the fortran compiler to be
	    happy

	A: tests/verbatim-long-line.test:
	  * new test, check that a *very long* line starting with `%' is passed
	    verbatim to output, without line wrapping (if the user want to output
	    raw fortran code, we expect him to know what he's doing, so we must
	    be as unobtrusive as possible)

	M: tests/Makefile.am:
	  * $(ALL_TESTS) extended accordingly
	  * added `verbatim-long-line.test' to $(XFAIL_TESTS), since currently
	    the "verbatim output" functionality is partly broken (line wrapping
	    is still performed on lines that should be copied verbatim)

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	simplified code to deal with `define' builtin

	M: src/tokenizer.c:
	  * in function `deftok()': to see if a token must trigger token
	    definition, simply look if it  equals "define" or "DEFINE, not
	    if it has type `DEFTYPE'
	  * new global constant strings `defn[] = "define"' and
	    `bdefn[] = "DEFINE"'

	M: src/rat4.c:
	  * in `init()': do not install() "define" and "DEFINE" anymore as
	    `DEFTYPE'; this is no more needed, considering the changed in
	    `tokenizer.c'
	  * removed inclusion of `lookup.h': it is now useless

	M: src/ratdef.h:
	  * removed #define of `DEFTYPE': no more needed

	M: src/io.c:
	  * cosmetic change in `outch()' (w.r.t. C idioms)

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	`make' in tests/ rebuilf ratfor & other stuff

	M: tests/Makefile.am:
	  * make `all-local' depending on $(check_SCRIPTS), so that a `make'
	    or `make all' issued eithin the `tests/' directory rebuild ratfor
	    and defs.sh (and maybe, in future, other stuff too)

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	typofix in testcase

	M: tests/long-infile_f77.test:
	  * typofix: in string passed to testcase_SKIP: s/to bu/to be/

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	slightly improving an existing test

	M: tests/include-basic.test:
	  * leave all the test verbose (do not `set +x' when creating data files
	    for tests)
	  * be more verbose: use cat on more data files

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new test (about ratfor comments)

	A: tests/comments.test
	  * new test, checks that ratfor comments are by default discarded in
	    output

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	making C code more idiomatic & other improvements

	Using more typical C idioms; this reduces the code size (almost)
	without adding complexity to it.

	M: src/io.c:
	  * new (internal) macro `ngetch_'
	  * ngetch():
	     - improved description
	     - now uses macro `ngetch_'
	     - uses more C idioms
	     - SEMANTIC CHANGE: `_' do continuation only for one newline
	       or one line, i.e. if `_' is followe by two or more newline
	  * putbak(), outnum(), outcmnt():
	     - uses more C idioms
	  * fixed definition of `outch()': its declaration was given as
	    `void outch(char c)', entirly on one line; rewritten to follow
	    our coding "standards" (see HACKING), with the return type `void'
	    on a line of its own.

	M: NEWS:
	  * updated accordingly

	M: tests/Makefile.am:
	  * removed `underscore.test' from $(XFAIL_TESTS): it now works

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new tests (esp. line continuation with `_')

	A: tests/underscore.test
	A: tests/underscore_f77.test
	  * new tests

	M: tests/define-multiline.test:
	  * some checks here pertained better to the new testcase
	    `underscore.test'; moved there

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly
	  * `tests/underscore.test' added to $(XFAIL)

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	sanitazing ngetch

	Now the `ngetch()' subroutine (defined in `src/io.c') does not anymore
	take a char* pointer where to save the char read, but simply returns
	it (previously it did both; weird).

	M: src/io.h:
	M: src/io.c:
	M: src/tokenizer.c:
	  * modified accordingly

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	typofix (fix fatal bug in tests/Makefile.am)

	M: tests/Makefile.am:
	  * added forgotten line-continuing backslash in the list of tests
	    $(ALL_TEST) (which caused a "missing separetor" error in the generated
	    Makefile)

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new test (translation services)

	M: tests/rel-transl.test:
	  * new test, check translatation of e.g. `==' into `.eq.',
	    `&&' into `.and.', etc.

	M: tests/Makefile.am:
	  * updated accordingly

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	updating BUGS

	M: BUGS:
	  * added bug of `%': %-protected lines are not truly passed verbatim to
	    output, but are still subject to line wrapping
	  * tell that the problem about the `return' keyword not flagged as an
	    error when used outside any function is a limitation rather than a bug

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	keep NEWS up-to-date

	M: NEWS:
	  * tell that now tabs in input are always converted to single spaces
	    in output, even in generated fortran comments.

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	extending testsuite

	A: tests/no-tabs.test:
	A: tests/no-semicolons.test:
	A: tests/no-duble-quotes.test:
	A: tests/no-curly-brackets.test:
	A: tests/startlabel-default.test:
	A: tests/startlabel-user-choice.test:
	  * new tests

	D: simple-assign.test:
	  * removed, too much dumb & useless

	M: Makefile.am:
	  * $(ALL_TESTS) updated accordingly
	  * added `no-double-quote.test' to $(XFAIL_TESTS)

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	no more tabs in output, even in fortran comments

	M: src/io.c:
	  * subroutine `outcmnt()': convert each tab in a space
	  * some cosmetic changes (w.r.t white spaces)

2009-09-02  Stefano Lattarini  <stefano.lattarini@gmail.com>

	testsuite: nasty bug of zsh, workaround explained

	M: tests/README:
	  * Explained nasty bug of zsh 4.x regarding redirection of stderr when
	    `set -x' is active (the bug being that in such a case, zsh also
	    redirects the trace of the command!), and how to avoid stumbling upon
	    it.
	  * Fixed `Running all tests' section, by removing incomplete text and
	    expanding explanations.
	  * Reorganized & reordered some existing recommendations.

2009-09-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	generated file tests/defs.sh is now set readonly

	M: configure.ac:
	  * addded proper call to AC_CONFIG_LINKS to make the generated file
	    `tests/defs.sh' readonly (that file was already generated by
	    config.status, but with read-write permissions).

2009-09-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	sligthy improved testscase `include-fail.test'

	M: tests/include-fail.test:
	  * do an `ls' on files on which `include' is expected to choke, to show
	    the users that their perms etc. are as expected

2009-09-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	nitpick in configure.ac

	M: configure.ac:
	  * added comment giving reasons for apparently weird quoting in the
	    definition of `__vim_modeline__' macro

2009-09-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	nitpick in maint.mk

	M: maint.mk:
	  * added brief comment describing role and purpose of this file

2009-09-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	removed $Id$ lines from all files

	In all files: removed $Id$ lines, which created more problems than they
	solved.  In fact, when a file with $Id$ lines and "ident" git attribute
	was committed, its $Id$ line was *not* updated with the new commit's
	SHA-1 id.  Thus, a "make dist" could create a tarball including files
	with *wrong* $Id$ line -- which is far, far worse than having no $Id$
	line at all.

	D: .gitattributes:
	D: doc/.gitattributes:
	D: src/.gitattributes:
	D: tests/.gitattributes:
	  * Deleted, no more needed

	M: tests/defs.in:
	  * Removed $Id$ line
	  * Removed sanity checks involving the '$Id$' line expected to be found
	    in defs.sh

	M: BUGS:
	  * Removed $Id$ line
	  * Added very brief description of this file's purpose

	M: configure.ac:
	  * Removed $Id$ line
	  * removed call to AC_REVISION (it had $Id$ as argument, so its useless
	    now)

	M: HACKING:
	  * Removed $Id$ line
	  * Tell to avoid $Id$ lines, and explain why its better to do so.

	M: COPYING:
	M: GNUmakefile:
	M: Makefile.am:
	M: NEWS:
	M: README:
	M: doc/Makefile.am:
	M: doc/ratfor.man:
	M: m4/rat4_prog_diff_u.m4:
	M: m4/rat4_prog_f77_for_testsuite.m4:
	M: maint.mk:
	M: src/Makefile.am:
	M: src/error.c:
	M: src/error.h:
	M: src/io.c:
	M: src/io.h:
	M: src/lookup.c:
	M: src/lookup.h:
	M: src/main.c:
	M: src/main.h:
	M: src/rat4.c:
	M: src/rat4.h:
	M: src/ratcom.h:
	M: src/ratdef.h:
	M: src/tokenizer.c:
	M: src/tokenizer.h:
	M: src/utils.c:
	M: src/utils.h:
	M: tests/000sanity.test:
	M: tests/CheckTestsList.am:
	M: tests/Makefile.am:
	M: tests/README:
	M: tests/define-balanced-paren.test:
	M: tests/define-balanced-paren_f77.test:
	M: tests/define-basic.test:
	M: tests/define-basic_f77.test:
	M: tests/define-case-sensibility.test:
	M: tests/define-fail.test:
	M: tests/define-multiline.test:
	M: tests/define-multiline_f77.test:
	M: tests/define-nested.test:
	M: tests/define-nested_f77.test:
	M: tests/define-redefine.test:
	M: tests/define-semicolon.test:
	M: tests/define-semicolon_f77.test:
	M: tests/define-whitespaces.test:
	M: tests/devnull-input.test:
	M: tests/empty-input.test:
	M: tests/include-abspath.test:
	M: tests/include-basic.test:
	M: tests/include-defined.test:
	M: tests/include-fail.test:
	M: tests/include-nested-deep.test:
	M: tests/include-nested.test:
	M: tests/include-stress.test:
	M: tests/include-synerr.test:
	M: tests/integers-many-bases.data:
	M: tests/integers-many-bases.test:
	M: tests/integers-many-bases_f77.test:
	M: tests/keepcomment.test:
	M: tests/keepcomment_f77.test:
	M: tests/long-infile.test:
	M: tests/long-infile_f77.test:
	M: tests/simple-assign.test:
	M: tests/stress1_f77.test:
	M: tests/stress2_f77.test:
	M: tests/synerr-basic.test:
	M: tests/synerr-include-lineno.test:
	M: tests/synerr-lineno.test:
	M: tests/synerr-nonfatal.test:
	M: tests/synerr-nonfatal_f77.test:
	  * Removed $Id$ line

2009-09-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added INSTALL file

	M: INSTALL:
	  * new file, copied verbatim from automake-provided copy

	M: NEWS:
	  * updated accordingly

2009-09-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	calling make in unconfigured tree calls autoreconf

	M: maint.mk:
	  * Define $(_autoconf) (honors the environment variable `AUTORECONF').
	  * If $(.DEFAULT_GOAL) is set to `abort-due-to-no-makefile', redefine
	    it so that it run autoreconf, configure and make. This way, a `make'
	    command issued in an unconfigured tree should automatically
	    regenerate, reconfigure and rebuild the package.
	  * New target `autoreconf': run autoreconf in the source tree.
	  * New target `reconfigure': run autoreconf in the source tree, then
	    run configure in the build tree.
	  * Removed comment (leftover from the original gnulib's maint.mk): the
	    comment does not apply anymore to our heavily modified copy.
	  * cosmetic hcanges to output of `strict-distcheck' target

	M: NEWS:
	  * updated accordingly
	  * moved the $Id$ line to the bottom of the file (it was at top)

2009-09-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improving maint.mk w.r.t git checks (version 1.0h)

	M: maint.mk:
	  * improved target `vc-nodiff-check': now both:
	      1. unadded changes,  and
	      2. changes  added but uncommited
	    are caught (this target has no more associated rules, it just depends
	    from the new targets `git-no-diff-check' and `git-no-diff-cached-check'
	  * new targets `git-no-diff-check' and `git-no-diff-cached-check'
	  * added files `git-no-diff-check.tmp' and `git-no-diff-cached-check.tmp'
	    (temporary files used resp. in targets `git-no-diff-check' and
	    `git-no-diff-cached-check') to $(CLEAN_FILES)

2009-09-01  Stefano Lattarini  <stefano.lattarini@gmail.com>

	version 1.0h

	M: maint.mk:
	  * improved target `major/beta/alpha': abort immediately if a git tag
	    named after the given version exists already
	  * new variable `$(quoted_version)' -- $(VERSION) with some metacharacters
	    quoted, to be used e.g. in grep or sed commands

	M: configure.ac:
	  * (in AC_INIT): version bumped: 1.0g => 1.0h

2009-08-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	retrofitting fixes for NEWS

	M: NEWS:
	  * the list of user-relevant changes were incomplete for some previous
	    alpha releases; fixed this (by reading through the project history)

2009-08-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	let the user avoid use of fortran 77 in testsuite

	M: tests/defs.in:
	  * in `require_fortran_compiler()': call `testcase_SKIP' not only when
	    F77 is given, but also when it's set to the value `NONE'

	M: README:
	  * added a pointer to tests/README

	M: tests/README:
	  * in new section `Fortran 77 compiler': explain that the fortran
	    compiler to be used in testing can be set at configure time with the
	    `RAT4_TESTSUITE_F77' option (if set to `NONE', this should tell the
	    test driver to skip all the tests requiring a fortran compiler)

	M:  m4/rat4_prog_f77_for_testsuite.m4:
	  * BUGFIX: fixed description of `RAT4_TESTSUITE_F77' precious variable:
	    it's just expect to be *a* fortran77 compiler, not a *list* of
	    fortran77 compilers
	  * serial number bumped: 1 => 2

	M: maint.mk:
	  * modified `strict-distcheck' rule to exercise the testsuite with no
	    fortran compiler avaiable, by adding newly introduced setting
	    `F77=NONE' to `DISTCHECK_CONFIGURE_FLAGS'

	M: NEWS:
	  * updated accordingly

2009-08-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	typofix in configure.ac

	M: configure.ac:
	  * typofix in comment:
	     s/an available fortran compilers/an available fortran compiler/

2009-08-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved and extended maintainer's make rules

	A: GNUmakefile
	  * new file (maintainer wrapper arund Makefile); just a *verbatim copy*
	    from gnulib's `gnumakefile' module

	A: maint.mk:
	  * new file (*required* by GNUmakefile); it's *not* a copy from gnulib's
	    `maintainer-makefile' module, just loosely inspired by it.

	M: Makefile.am:
	  * added `GNUmakefile' and `maint.mk' to $(EXTRA_DIST)
	  * added `BUGS' and `NEWS' to $(dist_doc_DATA)

	M: configure.ac:
	  * added proper call to AC_CONFIG_LINKS (to have GNUmakefile available
	    also in VPATH builds)
	  * addec call to AC_REVISION (with `$Id$' as argument)
	  * to AM_INIT_AUTOMAKE:
	      - added option `no-installinfo'
	      - added option `no-texinfo.tex'

	M: .gitattributes:
	  * added "GNUmakefile ident" to have $Id$ substitution in GNUmakefile
	  * added "maint.mk ident" to have $Id$ substitution in maint.mk

	M: .gitignore:
	  * ignore the `ratfor-*.tar.gz' tarballs and the `ratfor-*/' distdirs

	M: NEWS:
	  * updated to register user-visible changes done in this checkin

2009-08-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improve configure.ac and call to AM_INIT_AUTOMAKE

	M: configure.ac:
	  * added call to AC_REVISION (with `$Id$' as argument)
	  * to AM_INIT_AUTOMAKE:
	      - added option `no-installinfo'
	      - added option `no-texinfo.tex'

2009-08-31  Stefano Lattarini  <stefano.lattarini@gmail.com>

	release 1.0g (introduction of git as VCS)

	M: NEWS:
	  * updated appropriately

	M: configure.ac:
	  * version in AC_INIT bumped: 1.0f => 1.0g

	A: .gitattributes:
	A: .gitignore:
	A: doc/.gitattributes:
	A: src/.gitattributes:
	A: src/.gitignore:
	A: tests/.gitattributes:
	A: tests/.gitignore:
	  * new files, controlling git operations & config

2009-08-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	updated NEWS w.r.t. release 1.0f

	M: NEWS:
	  * updated to reflect changes introduced in the (previous) version 1.0f

2009-08-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	new stress tests

	D: tests/stress_f77.test:
	A: tests/stress1_f77.test:
	  * renamed

	A: tests/stress2_f77.test:
	  * new stress test (compiling and running the generated fortran code)

	A: tests/long-infile.test:
	A: tests/long-infile_f77.test:
	  * new stress test: check that ratfor behaves properly on very long files

	M: test/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

	D: tests/testrw.r:
	  * deleted, no more needed (its content has been incorporated into the new
	    test case `stress2_f77.test')

2009-08-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixing bugs in makefiles w.r.t. `clean' targets

	M: tests/Makefile.am:
	  * BUGFIX. In target `clean-local-testdirs': do not fail on errors of
	    `find(1)' (which is used to find the unwritable subdirectories in the
	    directories to be cleaned, and to make them writable): we are truly
	    interested only in the exit stats of `rm(1)', since if it succed, then
	    it means that the test directories have been succesfully cleaned.
	    This fixes a bug (false cleanup failure due to irrelevant failure of
	    find) which prevented `make clean' to work if all the test directories
	    had already been removed.

	M: doc/Makefile.am:
	  * BUGFIX: do *not* add $(dist_man1_MANS) to $(CLEANFILES): our manpage is
	    *not* autogenerated, so it should not be removed!

2009-08-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	extending tests (esp. w.r.t. stress tests)

	M: tests/include-stress.test:
	  * comstic change in comment line describing test purpose

	A: tests/stress_f77.test
	  * new stress test

	D: tests/test.r:
	  * removed, no more needed (extended and incorporated into
	    `tests/stress_f77.test')

	M: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-08-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix (typo in deps decl) in tests/Makefile.am

	M: tests/Makefile.am:
	  * BUGFIX: now correctly declare `clean-local-ratfor' (instead of
	    `local-ratfor', as done previously) as a prerequisite for the target
	    `clean-local'.

2009-08-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix: add proper *.h files to ratfor_SOURCES

	M: src/Makefile.am:
	  * fixed bad bug (preventing header files needed to build ratfor from
	    being distributed): added proper src/*.h files to ratfor_SOURCES

2009-08-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improving modularity of ratfor source code

	M: configure.ac:
	  * version bumped: 1.0e => 1.0f
	  * fixed a comment referencing the old semantic of code searching for f77
	    compiler to be used in testing

	M: src/ratcom.h:
	  * removed no-more-needed global variables:
	      - outp
	      - outbuf[]

	M: src/rat4.c:
	  * subroutines moved out to new file `tokenizer.c':
	      - type()
	      - relate()
	      - deftok()
	      - getdef()
	      - gtok()
	      - gettok()
	  * rewritten `alldig()' to avoid the use of `type()'
	  * global variables moved out to  `tokenizer.c':
	      - incl
	      - fncn
	  * subroutines moved out to new file `io.c':
	      - outch()
	      - outstr()
	      - outtab()
	      - outdon()
	      - outasis()
	      - outcmnt()
	      - outnum()
	  * in `init()': removed initialization of (ex) global variable `outp'
	  * use macro `STREQ' intead of function `equal'
	  * some strings expected to be read-only and not used outside `rat4.c'
	    are now marked with `static const'
	  * added vim modeline

	M: src/utils.c:
	  * added some "warning" comments about potential problems in the code
	  * removed definition of function `equal'

	M: src/utils.h:
	  * added definition of macro `STREQ'
	  * removed decalration of function `equal'

	M: src/io.c:
	  * moved in definition of subroutines from `rat4.c':
	      - outch()
	      - outstr()
	      - outtab()
	      - outdon()
	      - outasis()
	      - outcmnt()
	      - outnum()

	M: src/io.h:
	  * added prototypes for the subroutines moved from `rat4.c' to `io.c'

	A: src/tokenizer.c:
	  * new file, with many subroutines moved in (basically verbatim) from
	    `rat4.c'; minor exceptions:
	      - subroutines for internal use in `tokenizer.c' only are declared
	        as `static'
	      - `type()' now uses `isdigit(c)' instead of `DIG0 <= c <= DIG9'
	      - use `fp', not `fd', as the preferred name of a variable holding a
	        file pointer (*FILE)

	A: src/tokenizer.h:
	  * new file

	M: src/Makefile.am:
	  * $(ratfor_SOURCES) updated accordingly

2009-08-30  Stefano Lattarini  <stefano.lattarini@gmail.com>

	add tests for the `-C' ratfor switch

	A: tests/keepcomment.test:
	A: tests/keepcomment_f77.test:
	  * new tests

	M: tests/Makefile.am:
	  * $(ALL_TESTS) extended accordinlgy

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	minor improvements to some tests scripts

	M: tests/define-balanced-paren_f77.test:
	M: tests/define-basic_f77.test:
	M: tests/define-multiline_f77.test:
	M: tests/define-nested_f77.test:
	M: tests/define-semicolon_f77.test:
	  * removed some useless calls to `cat stderr'

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added new test scripts tests/synerr-nonfatal*.test

	A: tests/synerr-nonfatal.test:
	A: tests/synerr-nonfatal_f77.test:
	  * new tests, check that ratfor continue its execution on non-fatal
	    syntax errors

	A: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added new test script `include-defined.test'

	A: tests/include-defined.test:
	  * new test

	A: tests/Makefile.am:
	  * $(ALL_TESTS) updated accordingly

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tiny change (leading comment in test script)

	M: tests/include-basic.test:
	  * slighty improved the comment line briefly describing test's purpose

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	s/grep/$GREP/, s/sed/$SED/, etc. in test scripts

	M: tests/*.test:
	  * really use `$GREP' instead of `grep', `$SED' instead of `sed' etc. in
	    test scripts (as recommended also by `tests/README')
	  * sometimes: other minor (mostly cosmetic) changes

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixed typo in tests/defs.in

	M: tests/defs.in:
	  * typofix: in verbose message in `run_CMD()': s/prevoious/previous/

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	some tests: less eye-candy, but faster and simpler

	M: tests/integers-many-bases.test:
	M: tests/integers-many-bases_f77.test:
	  * failures report made less eye-candy (but *not* less clear)
	  * this in turn allowed a semplification of the scripts, and also a
	    significative speedup of `integers-many-bases_f77.test'

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	make sure that stdin is closed in test scripts

	M: tests/defs.in:
	  * In a test script, it is an error if any command which must read from
	    standard input does so without first redirecting it; so now we
	    CLOSE STANDARD INPUT to make such an error stick out clearly.

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in tests/*.am (TESTS vs ALL_TESTS)

	M: tests/Makefile.am:
	  * use $(ALL_TESTS) to keep the list of *all* test scripts, so that the
	    user can override the $(TESTS) variable without clashing with the
	    `check-list-of-tests' target defined in `tests/CheckTestList.am'
	  * add $(ALL_TESTS) instead of $(TESTS) to $(EXTRA_DIST)
	  * by default, define $(TESTS) to be $(ALL_TESTS)

	M: tests/CheckTestsList.am:
	  * use $(ALL_TESTS) instead of $(TESTS) in the target
	    `check-list-of-tests'

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	minor improvements in exiting test scripts

	M: tests/define-fail.test:
	M: tests/define-basic.test:
	M: tests/define-balanced-paren.test:
	M: tests/include-stress.test:
	M: tests/include-nested-deep.test:
	  * minor (mostly cosmetic) changes

	M: tests/include-stress.test:
	  * now display content of some relevant files (with `cat') to have more
	    information avaiable in *.log files in case of test failures
	  * other minor (mostly cosmetic) changes

2009-08-29  Stefano Lattarini  <stefano.lattarini@gmail.com>

	adding some (f77 also) tests on builtin `define'

	A: tests/define-basic_f77.test:
	A: tests/define-nested_f77.test:
	A: tests/define-semicolon_f77.test:
	A: tests/define-balanced-paren_f77.test:
	A: tests/define-multiline_f77.test:
	A: tests/define-redefine.test:
	  * new tests

	M: tests/define-multiline.test:
	M: tests/define-nested.test:
	  * extended tests

	M: tests/define-basic.test:
	  * cosmetic changes in "brief description" line

	M: tests/define-balanced-paren.test:
	  * minor fix in comment line describing testcase's purpose

	M: tests/Makefile.am:
	  * $(TESTS) updated accordingly

2009-08-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improving diagnostic for bad usage of `define'

	M: src/rat4.c:
	  * if the symbol in `define(SYMBOL, ...)' is detected to be empty, say
	    so in the error message, rather than warning about a more generic
	    "non-alphanumeric name". Similarly for a stra `define', as in
	    `...; define; ...'.

	A: tests/define-fail.test:
	  * new test

	M: test/Makefile.am:
	  * $(TESTS) updated accordingly

2009-08-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	tests/README: added advice about diff's args order

	M: tests/README:
	  * added advice about the preferred order of diff arguments
	    (`diff expected got') to be used in test scripts (to make
	    diff output more intuitive)

2009-08-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	cosmetic change to a couple of test scripts

	M: test/include-nested.test:
	M: test/include-nested-deep.test:
	  * cosmetic change: s/diff expected got/diff exp got/, and relate changes

2009-08-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	adding some tests on ratfor builtin `define'

	A: tests/define-whitespaces.test:
	A: tests/define-basic.test:
	A: tests/define-nested.test:
	A: tests/define-semicolon.test:
	A: tests/define-balanced-paren.test:
	A: tests/define-multiline.test:
	A: tests/define-case-sensibility.test:
	  * new tests

	M: tests/Makefile.am:
	  * $(TESTS) updated accordingly

	M: BUGS:
	  * removed references to "jon@sep.stanford.edu.us"
	  * cite a new bug expsed by the testsuite: the ratfor builtin `define'
	    is case-insensible w.r.t. symbol names, so that a statement like:
	      define SYM "value"
	    defines both the symbols `SYM' and `sym' to "value"!
	  * cite the limitation about uncaught infinite recursion if a symbol
	    is defined (with the ratfor builtin `define') to an expression
	    containing the symbol itself

2009-08-28  Stefano Lattarini  <stefano.lattarini@gmail.com>

	can rebuild ratfor from within `tests/', finally

	M: tests/Makefile.am:
	  * Fixed automated rebuilding of `../src/ratfor', without having to know
	    its dependencies/prerequisites in this Makefile too (done with a combo
	    of `cd ../src', recursive make calls and auxiliary .PHONY target(s)).
	    We tought this fix was already done in a previous checkin, but we were
	    wrong (we devised a more complicated "workaround", which was badly
	    wrong, and in hindsight also dumb).

	M: src/rat4.c:
	  * a couple of minor cosmetic changes

2009-08-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	added warnings about using zsh to run test scripts

	  M: tests/README:
	    (User interface, Getting details from failures)
	      -  Now explicitly state that every test is a "shell script", not just
	         a "script", and that it's run by `$CONFIG_SHELL' buy default.
	    (User interface, Supported shells)
	      - new subsection, telling about expected portability of the ratfor
	        test scripts, describing a zsh incompatibility (w.r.t. $0), and a
	        workaround to it (with the `--no-function-argzero' option).
	    (GENERAL)
	      - minor rewordings and improvements

2009-08-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	fixing stack of included files, adjusting test cases

	M: src/utils.c:
	  * definition of subroutine `strsave()' moved in from `lookup.c', since
	    it might be usful on other parts of code (is now used at least by
	    `src/rat4.c')

	M: src/utils.h:
	  * added prototype of `strsave()'

	M: src/lookup.c:
	  * definition of subroutine `strsave()' moved out to `utils.c', since it
	    might be usful on other parts of code
	  * now include `utils.h' too (to use `strsave()')

	M: src/main.c:
	  * input file is no more opened in `main()' here, but rather in `init()'
	    in `src/rat4.c'
	  * BUGFIX: in option-parsing code: call to `getopt()' erroneously looked
	    for option `-l' instead that for option `-n' (this causing also
	    inconsistency with the subsequent `switch' statement); fixed this
	  * added inclusion of `rat4.h'

	M: src/rat4.c:
	  * improved handling of included files stack, by making the stack of input
	    files an array of pointers to char; this change required removing the
	    global variables `fnamp' and `fnames' and adding the new global variable
	    `filename' (which is `char *filename[]')
	  * first input file is now open in `init()'
	  * uses new subroutine `synerror_eof()' to singla unexpected END-OF-FILE, so
	    that the line number in the error message is no more off by one.

	M: src/rat4.h:
	  * added declaration of subroutines `parse()' and `init()'

	M: src/error.c:
	  * improved format of messages printed by synerr() and baderr(): print
	    them all on a single line, to ease greppability of stderr; also, use
	    gcc-like format: `FILENAME:LINENO: ERRMSG'
	  * in synerr: account for the removal of global variables `fnamp' and
	    `fnames', and the addition of new global variable `filename'
	  * new subroutine `synerr_eof()', used to avoid having line number in
	    "unexpected EOF" error messages off by one.
	  * new internakl subroutine `synerr_()', used by `synerr()' and
	    `synerr_eof()'

	M: src/error.h:
	  * added prototype of `synerr_eof()'

	M: src/ratcom.h:
	  * account for the removal of global variables `fnamp' and `fnames', and the
	    addition of new global variable `filename'

	A: tests/include-synerr.test:
	A: tests/synerr-include-lineno.test:
	 * new tests

	M: tests/Makefile.am:
	  * updated consequently by extending $(TESTS)
	  * removed `include-fail.test' from $(XFAIL_TESTS)

	D: tests/synerr.test:
	AM: tests/synerr-basic.test:
	  * renamed
	  * adjusted and/or extend tests

	M: tests/synerr-lineno.test:
	M: tests/include-fail.test:
	  * adjusted and/or extend tests

	M: tests/include-nested.test:
	  * BUGFIX: really test nested include

2009-08-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	extended list of bugs: synerr broken in included files

	M: BUGS:
	  * added report of BUG: syntax errors not reported if detected in
	    included files

2009-08-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in main() w.r.t. option parsing

	M: src/main.c:
	  * BUGFIX: in option-parsing code: call to `getopt()' erroneously looked
	    for option `-l' instead that for option `-n' (this causing also
	    inconsistency with the subsequent `switch' statement); fixed this

2009-08-27  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: BUGS:
	  * added description of undesired behaviour of having `return' accepted
	    outside any unction definition

2009-08-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	adding new test cases & fixing exposed bugs

	A: tests/include-basic.test:
	A: tests/include-abspath.test:
	A: tests/include-nested.test:
	A: tests/synerr-lineno.test:
	A: tests/include-stress.test:
	A: tests/include-nested-deep.test:
	A: tests/synerr.test:
	A: tests/include-fail.test:
	  * new test cases

	M: tests/Makefile.am:
	  * $(TESTS) updated accordingly
	  * added `include-fail.test' to $(XFAIL_TESTS): currently, the line
	    numbers in error messages about the `include' statements seem to
	    be off by one

	M: tests/defs.in:
	  * new subroutines:
	     - getstr()
	     - tolower()
	     - toupper()

	M: src/error.c
	  * BUGFIX: in `synerr()': set global variable `exit_status' to `1'
	  * related change: initialize global variable `exit_status' to `0'
	  * "documentaion" of `baderr()' slighty improved

	M: src/error.h
	  * add declaration of global variable `exit_status'

	M: src/main.c:
	  * `main()': related change: exit with `exit_status' instead that with
	    `0' when reaching the end of the function

	M: src/rat4.c:
	  * improved code for file inclusion (esp. deal better with white spaces
	    & do not expect the included file to be quoted by default)
	  * semantic change: `include' do not accept quoted filenames anymore

	M: configure.ac:
	  * version bumped to 1.0e

	M: NEWS:
	  * updated

	M: BUGS:
	  * updated: tell that the `include' statement corce the name of the file
	    to be included to lower case

2009-08-25  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix in rules to rebuild ratfor from within `tests/'

	M: tests/Makefile.am:
	  * BUGFIX: in definition of check_SCRIPTS: use `ratfor$(EXEEXT)',
	    not simply `ratfor'
	  * BUGFIX: added tweakings to be sure that ../src/ratfor is truly rebuilt
	    if its sources change

2009-08-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	NLS nuisances: make sure tests run in C locale

	M: tests/defs.in:
	  * make sure that the trst scripts run in C locale, for repeatibility:
	     - LC_ALL set to "C" and exported
	     - LANGUAGE set to "C" and exported
	     - LANG set to "C" and exported

2009-08-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	nitpick

	M: tests/defs.in:
	  * shortened a verbose message so that the line displaying it is no
	    more longer that 76 chars

2009-08-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	improved verbose messages in run_CMD()

	M: tests/defs.in:
	  * in `run_CMD()': improved verbose messages, so that when running with
	    `set -x' active the user is given an hint of what were the expected
	     exit status of the program and its real one

2009-08-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	slighty improving implementation of run_CMD()

	M: tests/defs.in
	  * improving implmentation of run_CMD() (no semantic change should
	    be implied)
	  * improving run_CMD message to user when `set -x' is active

2009-08-24  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfix: run the tests with correct shell and environ

	M: tests/Makefile.am:
	  * BUGFIX correctly define `$(TEST_LOG_COMPILER)' to `env' rather
	    than to the empty string
	  * BUGFIX: correctly define `$(AM_TEST_LOG_FLAGS)' rather than
	    `$(TEST_AM_LOG_FLAGS)'
	  * new variable `$(TEST_SHELL)', defaulting to $(SHELL) (but is used
	    only by test scripts, and is user-overridable)
	  * BUGFIX: add `$(TEST_SHELL)' as the last component of
	    `$(AM_TEST_LOG_FLAGS)'

2009-08-23  Stefano Lattarini  <stefano.lattarini@gmail.com>

	simplified exit trap in tests/defs.in

	M: tests/defs.in:
	  * simplified exit trap implementation: now it uses a global variable
	    `$rat4_exit_default' instead of previously used the auxiliary file
	    `$testSubDir/exit.status'
	       - subroutine `Exit()' modified accordingly
	       - subroutine `cleanup_at_exit()' modified accordingly
	       - removed definition `exitStatusFile = $testSubDir/exit.status'
	       - added definition of default value for `$rat4_exit_default'
	  * in `Exit()' and `cleanup_at_exit()': do not call `set +x' anymore,
	    since its better if the exit trap is traced

2009-08-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Standardize exit points in test cases

	M: tests/README:
	  * tell to prefer the `testcase_PASS', `testcase_FAIL' etc. over `Exit 0'
	    `Exit 1' etc.
	  * related improvements to wordings and ordering.

	M: tests/defs.in:
	  * new subroutines `testcase_PASS' and `testcase_FAIL'
	  * FIXINGs: if sanity checks fail, abort the script with exit status `99'
	    rather than `1' or `255'
	  * in `testcase_HARDERROR': write reason af failure on stderr rather than
	    on stdout
	  * minor nitpicks

	M: tests/devnull-input.test:
	M: tests/000sanity.test:
	M: tests/simple-assign.test:
	M: tests/empty-input.test:
	M: tests/integers-many-bases.test:
	M: tests/integers-many-bases_f77.test:
	  * updated accordingly to the recommendations in `tests/README'

2009-08-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	bugfixes in testsuite (integers-many-bases_f77)

	M: tests/integers-many-bases_f77.test:
	  * FIXED BAD BUG: in loop reading lines from data file
	    `integers-many-bases.data': we continued to the next loop iteration
	    also for lines for which we shouldn't; don't do this anymore
	  * BUGFIX: removed stray unconditional call to `Exit 1', inserted for
	    testing purposes and never removed; it was never processed
	    since we were errnouesly akipping all the tests in the script,
	    due to the bug just described (and fixed)
	  * BUGFIX: fixed order of arguments in a call to `run_CMD':
	     s|run_CMD -e 0 ./t.exe|run_CMD ./t.exe -e 0|
	  * BUGFIX: do not expect fortran-compiled program to output `0123' when
	    asked to print `0123': expect it to print `123' instead. This in turn
	    required changes to accept the following values in the third field of
	    input lines: "", "compile-also", "no-compile" and "compile-only"
	  * BUGFIX: fixed some wrong/extra redirections that made succesfull tests
	    to be erroneously considered as failed

	M: tests/integers-many-bases.test:
	  * accept the following values in the third field of input lines: "",
	    "compile-also", "no-compile" and "compile-only"; other related changes

	M: tests/integers-many-bases.data:
	  * fixed the third field accordingly to changes in test scripts

2009-08-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/devnull-input.test:
	M: tests/000sanity.test:
	M: tests/simple-assign.test:
	M: tests/empty-input.test:
	M: tests/integers-many-bases.test:
	M: tests/integers-many-bases_f77.test:
	  * if inclusion of `./defs.sh' fails, exit with status `99' (indicating
	    an hard error to the testsuite driver) rather than simply with exit
	    status `1'

2009-08-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/integers-many-bases_f77.test:
	  * BUGFIX: s/HARDERROR/testcase_HARDERROR/

2009-08-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Tiny optimization in testsuite

	By default, directly run the testscripts with the $SHELL found by
	configure, rather them forcing everyone of them to re-execute
	itself with $SHELL

	M: tests/defs.in:
	  * now use `$RAT4_TESTSUITE_RUNNING_WITH_CONFIG_SHELL' instead of
	    `$RAT4_TESTSUITE_FORCE_BIN_SH'
	  * removed `${__RAT4_TESTSUITE_RERUN_WITH_CONFIG_SHELL__}': no more
	    needed
	  * added comments about the rationale behind those variables

	M: tests/Makefile.am:
	  * $(TEST_LOG_COMPILER) now ends with $(SHELL), so that $(SHELL)
	    is used to run the *.test scripts
	  * $(TEST_LOG_COMPILER) does not start anymore with `env' (avoid
	    useless forks)
	  * added `RAT4_TESTSUITE_RUNNING_WITH_CONFIG_SHELL=yes' to
	    `$(TEST_AM_LOG_FLAGS)'; this way, the test scripts do not
	    uselessly re-excute themselves with $(SHELL)
	    [NOTE: this "optimization" seems to be useless as far as
	     benchmarks on Linux are concerned, but it is aestetically and
	     conceptually good, and does not add any complexity to the
	     build system]

2009-08-21  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/README:
	  * improved & fixed expalanation of how to run a test script manually
	  * added suggested layout of files for a test checking a ratfor feature
	    by both grepping its output and using f77   * other fixings of
	    wordings, layout and code samples

2009-08-20  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/README:
	  * added warnings about portability to different shells (with a proper
	    reference to the autconf manual)

2009-08-20  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Bugfix: testsuite: fixed portability problem w.r.t. Zsh
	
	M: tests/integers-many-bases.test:
	M: tests/integers-many-bases_f77.test:
	  * fixed portability problem w.r.t Zsh: we used `$status' to hold the
	    global exit status of thr test script, but on zsh `$status' is a
	    readonly reserved variable (equivalent to `$?'); fixed this by
	    renaming `$status' to `$rc'

2009-08-20  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Bugfix: add file forgotten in previous commit

	A: tests/integers-many-bases.data:
	  * forgotten in previous checkin! F*ck!

2009-08-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Testsuite: s/$RAT4_TESTSUITE_F77/$F77/
	
	In test scripts: do not use the cumbersome notation
	`$RAT4_TESTSUITE_F77' ## anymore to inidcate the fortran 77
	compiler to be used in testing; simply uyse `$F77' instead.

	M: tests/defs.in:
	 * from:
	    - RAT4_TESTSUITE_F77=${RAT4_TESTSUITE_F77-'@RAT4_TESTSUITE_F77@'}
	   to:
	    + F77=${RAT4_TESTSUITE_F77-'@RAT4_TESTSUITE_F77@'}
	 * fixed `require_fortran_compiler()' and ``run_F77()' accordingly
	 * new hack in `run_CMD()' to have better interoperability between
	   `set -x' and `run_CMD()'

2009-08-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Extending and improving testsuite

	M: tests/integers-many-bases.test:
	  * cosmetic changes (making code flow clearer)
	  * data to be used as testcase input moved out (to new file
	    `tests/integers-many-bases.data'), instead of being automatically
	    generated using a here-document (this is needed because the data
	    used here needs to be used also in new test
	    `tests/integers-many-bases-f77.test')
	  * modified to read data from new file `tests/integers-many-bases.data'

	A: tests/integers-many-bases-f77.test:
	  * new test: similar to `tests/integers-many-bases.test', but instead
	    of grepping the ratfor output, compile it and run the created program,
	    grepping the output of this last program instead

	A: tests/integers-many-bases.data:
	  * new file, data moved out from `tests/integers-many-bases.test'
	  * added a third field for every line: says if the input obtained
	    from it is expected to be compilable by fortan77

	M: tests/Makefile.am:
	  * added explicit definition of $(TEST_EXTENSIONS) (to simply `.test')
	  * added new tests `tests/integers-many-bases-f77.test' and
	    `simple-assign.test' to $(TESTS)
	  * added `integers-many-bases.data' to $(EXTRA_DIST)
	  * added dependency of test outcomes:
	     - integers-many-bases.log
	     - integers-many-bases-f77.log
	    from data file `integers-many-bases.data'

	A: tests/simple-assign.test:
	  * new test, check that ratfor correctly pass a simple assignment
	    (e.g. `x = 1') unchanged

2009-08-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/defs.in:
	  * in subroutine `Exit()':
	     - added `set +x' at top
	     - fixed indentation: consistently four spaces

2009-08-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/devnull-input.test:
	M: tests/000sanity.test:
	M: tests/empty-input.test:
	  * in every usage of 'run_CMD()' or 'run_RATFOR()': added trailing
	    `|| Exit 1' to correctly catch failures

2009-08-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Fixed potentially serious bug in tests/defs.in

	M: tests/defs.in:
	  * BUGFIX: sometimes, bash don't pass the a "failure" exit status to the
	    exit trap if some syntax error is detected. This might cause false
	    positive PASSes in testsuite, which is especially bad. Fixed this,
	    by changeing the `Exit()' subroutine and the defintions of exit and
	    signal traps
	  * improved readability: exit trap code is now saved in the new
	    `cleanup_at_exit()' subroutine
	  * `$curdir' renamed as `$testrootdir'
	  * variable `$testSubDir' now contains an absolute path
	  * new variable `$exitStatusFile'
	  * removed comment telling that "this file is havily based on automake's
	    own tests/defs.in file": the two files are now quite different, and the
	    previous comment does not hold anymore
	  * removed use of `SH_ERREXIT_WORKS': it is no more needed

	M: configure.ac:
	  * removed call to `RAT4_CHECK_SH_ERREXIT_WORKS': no more needed

	D: m4/rat4_check_sh_errexit_works.m4:
	  * removed, no more needed

	M: tests/README:
	  * document new semantic of Exit() and of testcase scripts in general;
	    in particular, explicitly state that `Exit()' must be called on
	    either success or failure, otherwise the testcase will end in an
	    "untrapped failure" a.k.a. "hard error"

	M: tests/000sanity.test:
	M: tests/devnull-input.test:
	M: tests/empty-input.test:
	M: tests/integers-many-bases.test:
	   * accordingly to the new testcase semantic, call `Exit 1' on failure
	     and `Exit 0' on success

2009-08-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/defs.in:
	  * BUGFIX: definition of $SHELL moved before every piece of code
	    were $SHELL is used
	  * definitions of other AC_SUBS't variables moved along with that
	    of SHELL (which is itself an AC_SUBST'd variable)

2009-08-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/defs.in:
	  * improved run_CMD():
	     - make clear what is the result of command stdout and command
	       stderr, by marking them with "=== stdout" and "=== stderr"
	     - "intoroperability" with `set -x' improved again

2009-08-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/defs.in:
	  * run_CMD(): modified to play better with `set -x' setting, by
	    not being too much verbose to the point of distracting the user

2009-08-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/defs.in:
	  * new global variables, symbolic names for possible exit
	    statuses:
	     + $SUCCESS = 0
	     + $FAILURE = 1
	     + $E_SKIP = 77
	     + $E_HARD = 99
	  * added new subroutines:
	     + run_F77()
	     + ws_normalize()
	     + testcase_SKIP()
	     + testcase_HARDERROR()
	  * in subroutine `require_fortran_compiler()': if fortran compiler
	    is not set, use `testcase_SKIP()' instead of `exit 77'

2009-08-19  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/defs.in:
	  * BUGFIX: in `rm_rf()': do not use find(1) on the given argument
	    if it's not a directory

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	BUGFIX

	M: tests/defs.in:
	  * BUGFIX: fixed *bad* bugs in "trap" code, caused by mosnomed variables;
	    in particular:
	      + `$rat4_testcase_signal' was used instead of `$sig' in "for" loop
	        initializing singal handlers
	      + in shell code of trap itself, exit staus was erroneously defined
	        with the wrong statement:
	          - exit_status=$?
	        rather than with the correct one:
	          - rat4_testcase_exit_status=$?

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/integers-many-bases.test:
	  * removed explicative comment made obsoleted by the previous
	    checkin

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/integers-many-bases.test:
	  * simplified: it is not needed to start a ratfor input with
	    "begin program" and to end it with "end program", so do not
	    do that

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/defs.in:
	  * new variable definition: `$RAT4_TESTSUITE_F77', holding the
	    Fortran 77 compiler detected by configure (with the macro
	    `RAT4_PROG_F77_FOR_TESTSUITE') 
	  * new subroutine `require_fortran_compiler()': check that
	    configure found a proper Fortran 77 compiler (by looking at
	    the variable $RAT4_TESTSUITE_F77), else abort the script with
	    exit status 77 (so that the testcase is considered SKIPPED
	    and not FAILED)

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: m4/rat4_prog_f77_for_testsuite.m4:
	  * in documentation:
	      - improved wording
	      - typofix: s/`RAT4_TESTSUITE_F77 list'/`RAT4_TESTSUITE_F77'/

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	D: m4/rat4_prog_f77_test.m4:
	A: m4/rat4_prog_f77_for_testsuite.m4:
	D: m4/rat4_diff_u.m4:
	A: m4/rat4_prog_diff_u.m4:
	D: m4/rat4_sh_errexit_works.m4:
	A: m4/rat4_check_sh_errexit_works.m4:
	  * renamed to more sensible names
	  * serial number in "# serial NNN ..." line reset to 1 (this is
	    not a problem, since the files were never distributed)
	  * fixed names of files in "# serial NNN ..." line
	  * in some of them: minor cosmetic changes (esp. w.r.t white
	    spaces and indentations in macro defs)

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: m4/rat4_prog_f77_test.m4:
	M: m4/rat4_diff_u.m4:
	M: m4/rat4_sh_errexit_works.m4:
	  * fixed lines with serial numbers, as suggested by aclocal docs:
	     - from: FILENAME.m4 serial NUMBER
	     + to:   serial NUMBER FILENAME.m4

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: ./m4/rat4_prog_f77_test.m4:   * updated serial number: 2 -> 3

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Dropped support for more than one fortran compiler to be used by
	the testsuite: only one will be used.

	M: ./m4/rat4_prog_f77_test.m4:
	  * dropped support for more than one fortran compiler to be
	    used by the testsuite: only one will be used
	  * documentation and comments updated accordingly
	  * precious variable/macro `RAT4_TESTSUITE_F77_LIST' renamed
	    as `RAT4_TESTSUITE_F77'

	M: configure.ac:
	  * a cosmetic change in a comment

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/Makefile.am:
	  * since we are using the new `parallel-tests' automake's
	    functionality, use $(TEST_LOG_COMPILER) and $(AM_TEST_LOG_FLAGS)
	    instead of $(TESTS_ENVIRONMENT), as it is the new recommended
	    way to go
	  * document this

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/Makefile.am:
	  * re-added definition `srcdir="$(abs_srcdir)"' to
	    $(TESTS_ENVIRONMENT),with an explanation of why
	    it is needed

2009-08-18  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/Makefile.am:
	  * Do not set $srcdir anymore in $(TESTS_ENVIRONMENT), since
	    latest  automake (>= 1.11) automatically export the
	    $(srcdir) variable in the environment of any test.
	  * Added a comment explaining the previous change.

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	A: HACKING:
	A: NEWS:
	  * new files

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	A: tests/README:
	  * new file, describing how to run and hack the testsuite

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/Makefile.am:
	  * make consistency checks in defs.sh skipped by default when a
	    tests script is run from the makefile; this is accomplished
	    by adding `RAT4_TESTSUITE_BYPASS_SANITY_CHECKS=yes' to
	    `$(TESTS_ENVIRONMENT)'
	  * added explicative comments where we add the defn of `$srcdir'
	    to $(TESTS_ENVIRONMENT)
	  * in $(TESTS_ENVIRONMENT): `$srcdir' is now defined to 
	    `$(abs_srcdir)' rather than to simply `$(srcdir)'

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/defs.in:
	  * improved the exit trap code:
	     - now $keep_testdir == 'n' and$keep_testdir == 'N' are
	       equivalent to $keep_testdir == 'no' (i.e. it should keep
	       the dinamically-created testdir even if the testcase is
	       sucessful)
	     - the signal that terminated the testcase (which is '0' for
	       normal termination through `exit') is now saved in the
	       global variable `rat4_testcase_signal' rather than the old
	       `signal' (which makes name conflict less likely)
	     - the exit status of the testcase is now saved in the global
	       variable `rat4_testcase_exit_status' rather than the old
	       `exit_signal' (which make name conflict less likely)

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: m4/rat4_prog_f77_test.m4:
	M: tests/defs.in:
	  * Given a consistent naming to the env variables used in the
	    testsuite: all their names must follow one of the patterns
	    `RAT4_TESTSUITE_*', `_RAT4_TESTSUITE_*', or
	    `__RAT4_TESTSUITE_*__'.
	    This required the following renamings:
	     - s/TESTED_RATFOR/RAT4_TESTUITE_RATFOR_EXECUTABLE/
	     - s/RAT4_TESTING_GREP/RAT4_TESTSUITE_GREP/
	     - s/RAT4_TESTING_EGREP/RAT4_TESTSUITE_EGREP/
	     - s/RAT4_TESTING_FGREP/RAT4_TESTSUITE_FGREP/
	     - s/RAT4_TESTING_SED/RAT4_TESTSUITE_SED/
	     - s/RAT4_TESTING_AWK/RAT4_TESTSUITE_AWK/
	     - s/RAT4_TESTING_SHELL/RAT4_TESTSUITE_SHELL/
	     - s/RAT4_TESTING_DIFF_U/RAT4_TESTSUITE_DIFF_U/

	M: tests/defs.in:
	  * renamed s/$DEFS_ID/$RAT4_TESTSUITE_DEFS_ID/

	M: m4/rat4_prog_f77_test.m4:
	  * serial nuber bumped: 1 => 2
	  * m4 macro `RAT4_PROG_F77_TEST' renamed as `RAT4_PROG_F77_FOR_TESTSUITE'

	M: configure.ac:
	  * m4 macro `RAT4_PROG_F77_TEST' renamed as `RAT4_PROG_F77_FOR_TESTSUITE'

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: configure.ac:
	  * BUGFIX: fixed definition of __vim__modeline not to interfere
	    with vim editor when it's reading configure.ac
	  * added call to AC_PROG_AWK

	A: tests/integers-many-bases.test:
	  * new file, test rafor support for integers in various bases

	M: tests/Makefile.am
	  * $(TESTS) updated accordingly

	M: tests/defs.in:
	  * new variables (symbolic names for white spaces):
	     + $SPACE
	     + $TAB
	     + $NEWLINE
	  * added some shorthands for common sed regexp:
	     + $ws
	     + $ws0p
	     + $ws1p
	  * new subroutine `ws_strip()'
	  * added definition of DIFF_U as AC_SUBST'd by configure
	  * added definition of AWK as AC_SUBST'd by configure
	  * simplified comments for `run_RATFOR()' (they were basically a
	    duplicate copy of the comments for `run_CMD()')
	  * improved `run_CMD()':
	      - to accept a `IGNORE' argument to `-e' option (meaning to
	        ignore exit status of given command)
	      - now `run_CMD()' do not call `Exit 1' anymore on failure,
	        just `return 1'

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: doc/ratfor.man:
	  * "DATE" argument of .TH is no more given by svn-substituted
	     $Date$ string, but by `Unknown Date' (we'll decide in the
	     future if that date is to be checked when making a release,
	     or automatically generated, or even left undefined).

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: doc/ratfor.man:   * converted to better ROFF (using .SH .B \fB \fI \fR etc.)   * added a LICENSE section (public domain)

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Vim modelines, $Id$, guard agains multiple inclusion of headers
	
	In most files: added vim modeline, customary $Id$ line and
	`svn:keywords' property. Also, C header files are now provided
	with the idiom to avoid multimple inclusion, as in: 
	  $ cat foo.h
	  #ifndef FOO_H
	  #  define FOO_H 1
	     ... (rest of header file)
	  #endif
	More specific changes to some files are listed below...

	M: m4/rat4_sh_errexit_works.m4:
	  * improved documentation (in heading comments) for macro
	    `RAT4_CHECK_SH_ERREXIT_WORKS'

	M: BUGS:
	  * at file beginning: now explicitly cite to the original author of
	    this file (some "jon@sep.stanford.edu.us")
	  * spaces converted to tabs & improved line wrapping

	M: tests/test.r:
	M: tests/testw.r:
	M: src/lookup.c:
	M: src/lookup.h:
	M: README:
	  * tabs converted to spaces (and some minor cosmetic changes)

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Improving modularity of some autotools-related files

	M: configure.ac:
	  * added `RAT4_*' and `_RAT4_*' patterns to `m4_pattern_forbid'
	  * moved out code to check for a diff with human-readable output:
	    in `m4/rat4_diff_u.m4' and
	  * moved out code to check that $SHELL fully supports the combo
	    `set -e' with `trap ... EXIT':  to `m4/rat4_sh_errexit_works.m4'
	  * moved out code to find a fortran compilers to be used in the
	    testsuite:  to `m4/rat4_prog_f77_list.m4'
	  * added call to AC_CONFIG_MACRO_DIR (with arg `m4')
	  * version (in AC_INIT) bumped from 1.0c to 1.0d

	A: m4:
	  * new dir, hold custom m4 macros to be used in configure.ac

	M: Makefile.am:
	  * added definition of ACLOCAL_AMFLAGS referrinf to new `m4/' dir
	  * removed useless definition: MAINTAINERCLEANFILES = INSTALL

	A: m4/rat4_diff_u.m4:
	  * new file, define macro `RAT4_PROG_DIFF_U' (using code moved in
	    from old `configure.ac')

	A: m4/rat4_prog_f77_test.m4:
	  * new file, define macro `RAT4_PROG_F77_TESTING' (using code moved
	    in from old `configure.ac')
	  * now put the Fortran 77 found in the variable `RAT4_F77_TEST_LIST'
	    rather than in the old one `RAT4_F77_LIST'

	A: m4/rat4_sh_errexit_works.m4:
	  * new file, define macro `RAT4_CHECK_SH_ERREXIT_WORKS' (using code
	    moved in from old `configure.ac')
	  * now we AC_SUBST `SH_ERREXIT_WORKS' instead of `sh_errexit_works'

	M: tests/defs.in:
	  * updated to reflect the renaming: s/sh_errexit_works/SH_ERREXIT_WORKS/

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Improving modularity of some autotools-related files

	M: tests/Makefile.am:
	  * code to check consistency of the tests' list moved out to new file
	    `tests/CheckTestsList.am'
	  * added inclusion of `tests/CheckTestsList.am'

	A: tests/CheckTestsList.am:
	  * new file: moved in here (from older `Makefile.am') the code to check
	    consistency of the tests' list

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/Makefile.am:
	  * in places where `$(top_builddir)/src/ratfor$(EXEEXT)' was still
	    used: now use `$(top_ratfor)' instead
	  * added a comments about why we use the absolute path of our test
	    ratfor executable in the $(TESTS_ENVIRONMENT) definiton
	  * added comment about the aim of target `clean-local-testdirs'
	  * added brief comment about the target `clean-local-ratfor'
	  * added brief comment about the target `ratfor$(EXEEXT)'
	  * minor (mostly cosmetic) related changes

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	FIXED TWO BAD BUGS in target `check-list-of-tests':
	
	M: tests/Makefile.am:
	  * Fixed BUG 1 (causing false negatives): the helper variable
	    `$(tfs)' was erroneously defined as:
	     - tests-in-makefile-list.tmp
	    instead of as:
	     + tests-on-filesystem-list.tmp
	    This caused the two to-be-confronted lists of tests (calculated
	    in different manners) to be written to the same file.
	  * Fixed BUG 2 (causing false positives): fixed the wildcard used
	    to find tests on filesystem: 
	      - s/*.tests/*.test/
	  * In `check-list-of-tests': explicitly set LC_ALL=C to ensure
	    correct ordering of tests from filesystem   * tests' list in
	    $(TESTS) are now alphabetically sorted (this is needed for the
	    `check-list-of-tests' target to work)

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: configure.ac:
	  * in the code to find a proper diff program supporting the `-u'
	    options: moved some dnl-comments outside the call to
	    AC_CACHE CHECK, to remove spurious whitespaces in configure
	    output

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/Makefile.am:
	  * BUFGIX: re-added `empty-input.test' to $(TESTS_LIST)

2009-08-17  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: configure.ac:
	  * added check for an option of diff that can produce better
	    human-readable output; thin in tun lead to...
	  * now AC_SUBST'd variable $(DIFF_U)
	  * version (in AC_INIT) bumped from 1.0c to 1.0d

	M: tests/Makefile.am:
	  * added a `check-list-of-tests' target checking that the list of
	    tests in $(TEST) contains all the tests/*.test files
	  * target `check-local' now depends from `check-list-of-tests'

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	A: tests/empty-input.test:
	A: tests/devnull-input.test:
	* new tests

	M: tests/Makefile.am:
	  * added new tests to $(TESTS)

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/defs.in:
	  * added `-i' option to subroutines `run()' and `RATFOR_run()'
	    (used to do standard input redirection of the tested command
	    in a more "treaceable" way)
	  * subroutine `RATFOR_run()' renamed as `run_RATFOR()'
	  * subroutine `run()' renamed as `run_CMD()'
	  * new subroutine `NOT()' (invert the exit status of a command)

	M: tests/000sanity.test:
	  * reflect renaming in defs.in:
	     s/run/run_CMD/

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: configure.ac:
	  * in possible warning message:
	     s/clean-local-check/clean-local-testsdirs/

	M: tests/Makefile.am:
	  * target `clean-local-check' renamed as `clean-local-testsdirs'
	  * typofix: s/.PHONY: clean-local-check/.PHONY: clean-local-ratfor/
	  * BUGFIXES: add $(EXEEXT) to `ratfor' in places where it was
	    forgotten
	  * BUGFIX: added defn of `TESTED_RATFOR' to $(TESTS_ENVIRONMENT)

	M: Makefile.am:
	  * cosmetic change: removed extra blank line

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: configure.ac:
	  * fixed wording & (minor) semnatic of TODO item about $F77
	    checking

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: configure.ac:
	  * added checks for Fortran 77 compiler (to be used in testing)
	  * new AC_ARG_VAR `RAT4_F77_LIST'

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: configure.ac:
	  * fixed bad typofix (introduced in previous checkin) that broke
	    configure.ac: in AC_CONFIG_SRCDIR: s|src/ratdef.c|src/rat4.c|

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: configure.ac:
	  * added TODO comment about to-be-done checks on fortran77

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: configure.ac:
	  * added -Wall and -Werror to AM_INIT_AUTOMAKE

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: tests/defs.in:
	  * added a way to bypass sanity checks (using the env var
	    `RAT4_BYPASS_TESTSUITE_SANITY_CHECKS ')
	  * now all names of used env vars have the form RAT4_* or __RAT4_*;
	    e.g.  s/TESTING_GREP/RAT4_TESTING_GREP/
	  * in the EXIT trap: bugfix: s/$as_me/$me/
	  * some other minor bug fixings and improvements

	M: tests/Makefile.am:
	  * added defn to TEST_ENVIRONMENTS:
	     + srcdir='$(srcdir)'

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Added testing framework

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: src/main.c:
	  * now properly print the version given by PACKAGE_VERSION rather
	    than an hard-coded one

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: src/main.c:
	  * cosmetic changes (w.r.t. indentation) to the `while' loop for
	    options' parsing

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: src/Makefile.am:
	  * name the created ratfor program simply `ratfor' rather than
	    `ratfor77'

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: src/main.c:
	  * some cosmetic changes & fixings, and minor improvements

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Package autoconfiscated

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: rat4.c:
	  * comsetic change (removed an extra space)

	M: Makefile:
	  * removed leftover cruft about defn of C macro S_CHAR

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Some cleanup

	* Get rid of the "LETA ... LETZ for 'a' ... 'z'" and
	  "BIGA ... BIGZ for 'A' ... 'Z'" mess

	* Removed some cruft due to the old char/S_CHAR distinction, e.g.
	    -  len = strlen((char *) (&init[0])) + 1;
	    +  len = strlen(init) + 1;

	* Other minor (mostly cosmetic) improvements

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	cosmetics & normzlizations about EOF

2009-08-16  Stefano Lattarini  <stefano.lattarini@gmail.com>

	I/O wrapper function sperated from ratfor code; esp., new files
	`io.c' and `io.h'

2009-08-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	D: keywords.h:
	  * no more needed: it was used by rat4.c only

	M: rat4.c:
	  * content of keywords.h moved in here

	M: Makefile:
	  * do not make rat4.c depend on keywords.h anymore

2009-08-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Now simply using `char' instead of `S_CHAR'

2009-08-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	rat4.[ch] renamed as main.[ch] and bulk.[ch] renamed as rat4.[ch]

2009-08-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	M: rat4.c M: Makefile M: bulk.c

2009-08-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	Starting a BIG REARGANIZATION of the source code to make it more
	manageable

2009-08-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	removed useless empty file '.make.dependencies.'

2009-08-15  Stefano Lattarini  <stefano.lattarini@gmail.com>

	initial import

