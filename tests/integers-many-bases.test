#!/bin/sh
# $Id$

# Check the ratfor support for integers in bases != 10 (format: b%ddd...)
# The checks are done by "grepping" the ratfor output.

. ./defs.sh || exit 99

# make output of our tests more pleasant for humans
makeup() {
    for f in "$@"; do
        : makeup "$f"
        $SED -e "s/'//" -e "s/'/ ==> /" <"$f" | ws_normalize >"$f-t"
        mv -f "$f-t" "$f"
    done
}

# since a redirected while loop might take place in a subshell in some
# shells, we need thew following hack
exec 5<&1
exec <"$srcdir"/integers-many-bases.data
: >exp
: >tst.r
set +x
echo "** reading data from $srcdir/integers-many-bases.data"
while read LINE; do
    case "$LINE" in
      \#*|"")
          # comments or empty lines: skip
          continue
          ;;
      *)
          # line should have format: "INPUT EXPECTED-OUTPUT [COMPILE-FLAG]"
          set X $LINE; shift; in=$1 out=$2 compile=${3-}; set X; shift
          case $compile in
            ""|compile-also|no-compile);;
            compile-only) continue;;
            *) testcase_HARDERROR "invalid 'compile' field: \`$compile'";;
          esac
          ;;
    esac
    echo "'$in' $in" >> tst.r
    echo "'$in' $out" >> exp
done
set -x
exec 5<&-

cat tst.r
run_RATFOR -e 0 tst.r || testcase_FAIL
test -s stderr && testcase_FAIL
grep -v '^[cC]' <stdout >got
makeup got exp
{ echo " ==="; } 2>/dev/null
cat exp
{ echo " ==="; } 2>/dev/null
cat got
{ echo " ==="; } 2>/dev/null
$DIFF_U exp got || testcase_FAIL
{ echo " ==="; } 2>/dev/null

testcase_PASS

# vim: ft=sh ts=4 sw=4 et
