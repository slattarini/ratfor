#!/bin/sh

# Check the ratfor support for integers in bases != 10 (format: b%ddd...)
# The checks are done by "grepping" the ratfor output.

. ./TestsAux/defs.sh || exit 99

# make output of our tests more pleasant for humans
makeup() {
    for f in "$@"; do
        : makeup "$f"
        $SED -e "s/'//" -e "s/'/ ==> /" <"$f" | ws_normalize >"$f-t"
        mv -f "$f-t" "$f"
    done
}

: NOW WILL READ TEST DATA

: >exp
: >tst.r

input=$srcdir/integers-many-bases.data
: "** reading data from $input"

# sanity checks
test -f "$input" || testcase_HARDERROR "data file \`$input' not found"
test -r "$input" || testcase_HARDERROR "data file \`$input' not readable"

# The useless `cat' below is required to work around a bug in the combo
# "MirBSD Korn Shell" + "GNU C Library"
cat "$input" | (
  rc=0
  while read LINE; do
    case "$LINE" in
      \#*|"")
        # comments or empty lines: skip
        continue
        ;;
      *)
        # line should have format: "INPUT EXPECTED-OUTPUT [COMPILE-FLAG]"
        set X $LINE; shift; in=$1 out=$2 compile=${3-}; set X; shift
        case $compile in
          ""|compile-also|no-compile)
            ;;
          compile-only)
            continue
            ;;
          *)
            echo "$me: invalid 'compile' field: \`$compile'" >&2
            rc=1
            continue
            ;;
        esac
        ;;
    esac
    echo "'$in' $in" >> tst.r
    echo "'$in' $out" >> exp
  done
  exit $rc
) || testcase_HARDERROR "some invalid 'compile' field was found"

: TEST DATA READ

cat tst.r
run_command "$RATFOR" tst.r || testcase_FAIL
test -s stderr && testcase_FAIL
$GREP -v '^[cC]' <stdout >got
makeup got exp
{ echo " ==="; } 2>/dev/null
cat exp
{ echo " ==="; } 2>/dev/null
cat got
{ echo " ==="; } 2>/dev/null
$DIFF_U exp got || testcase_FAIL
{ echo " ==="; } 2>/dev/null

testcase_PASS

# vim: ft=sh ts=4 sw=4 et
