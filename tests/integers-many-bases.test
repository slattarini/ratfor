#!/bin/sh
# $Id$

# Check the ratfor support for integers in bases != 10 (format: b%ddd...)
# The checks are done by "grepping" the ratfor output.

. ./defs.sh || exit 99

i=0
# since a redirected while loop might take place in a subshell in some
# shells, we need thew following hack
exec 5<&1
exec <"$srcdir"/integers-many-bases.data
rc=0
set +x
while read LINE; do
    case "$LINE" in
      \#*|"")
          # comments or empty lines: skip
          continue
          ;;
      *)
          # line should have format: "INPUT EXPECTED-OUTPUT [COMPILE-OK]"
          set X $LINE && shift; in=$1 out=$2 compile=${3-}; set X && shift
          case $compile in
            ""|compile-also|no-compile);;
            compile-only) continue;;
            *) testcase_HARDERROR "invalid 'compile' field: \`$compile'";;
          esac
          ;;
    esac
    i=`expr $i + 1`
    case $i in
        ?) j=00$i;;
       ??) j=0$i;;
        *) j=$i;;
    esac
    echo "$out" >exp$j
    echo "x = $in" >t$j.r
    : > msg$j
    echo "+ run_RATFOR -e 0 t$j.r"
    run_RATFOR -e 0 t$j.r || echo "* ratfor failed on input: $in" >>msg$j
    if test -s stderr; then
      {
        echo "* ratfor has no empty stderr on input: $in" >>msg$j
        echo "=== begin stderr"
        cat stderr
        echo "=== end stderr"
      } >>msg$j
    fi
    $SED \
        -e '/^[cC]/d' \
        -e 's/^ *//' \
        -e 's/^.*= *//' \
        -e 's/ *$//' \
    <stdout >got$j
    echo "+ cmp got$j exp$j"
    cmp got$j exp$j >/dev/null 2>&1 || {
        echo "* ratfor has unexpected output on input: $in" >msg$j
        echo "=== EXPECTED"
        cat exp$j
        echo "=== GOT"
        cat got$j
        echo "==="
    } >>msg$j
    test ! -s msg$j || { cat msg$j; rc=1; }
done

Exit $rc

# vim: ft=sh ts=4 sw=4 et
