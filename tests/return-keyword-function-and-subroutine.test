#!/bin/sh

# Check that ratfor generate proper code for `return' statement
# even when mixed definitions of functions and suvìbriutines are
# seen.

. ../lib/rat4-t.sh || exit 99

cat >tst1.r <<EOF
function func1
end
function func2
return 0
EOF

cat >tst2.r <<EOF
subroutine subr1
end
subroutine subr2
return
EOF

cat >tst3.r <<EOF
subroutine subr1
end
function func2
return 0
EOF

cat >tst4.r <<EOF
function func1
end
function subr2
return
EOF

cat tst1.r
cat tst2.r
cat tst3.r
cat tst4.r

xrun_RATFOR() {
    n=$1
    run_RATFOR tst$n.r || testcase_FAIL
    test ! -s stderr || testcase_FAIL
    mv stdout stdout$n || testcase_HARDERROR
}

xrun_RATFOR 1
$GREP "^ *return *$" stdout1 || testcase_FAIL
$GREP "^ *func1 *.*=.* 0 *$" stdout1 && testcase_FAIL
$GREP "^ *func2 *= *0 *$" stdout1 || testcase_FAIL

xrun_RATFOR 2
$GREP "^ *return *$" stdout2 || testcase_FAIL
$GREP "^ *subr.* *= *0 *$" stdout2 && testcase_FAIL

xrun_RATFOR 3
$GREP "^ *return *$" stdout3 || testcase_FAIL
$GREP "^ *subr.* *= *0 *$" stdout3 && testcase_FAIL
$GREP "^ *func2 *= *0 *$" stdout3 || testcase_FAIL

xrun_RATFOR 4
$GREP "^ *return *$" stdout4 || testcase_FAIL
$GREP "^ *subr.* *= *0 *$" stdout4 && testcase_FAIL
$GREP "^ *func.* *= *0 *$" stdout4 && testcase_FAIL

testcase_PASS

# vim: ft=sh ts=4 sw=4 et
