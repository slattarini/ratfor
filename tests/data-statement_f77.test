#!/bin/sh

# Check (with F77) that data statement works smoothly in ratfor.

. ./TestsAux/defs.sh || exit 99

require_fortran_compiler

cat >tst.r <<EOF
program testdatastmt
    implicit none
    integer k, l, m, n, i, j, B(2,2), v(5)
    real x, y, r, s, A(2,3)
    data k/5/, l /6/, x$TAB/1.5/, y/$TAB  2.5 /
    data m,n/10,  20/, r,s/2*3.5/
    data A/6 * 1.0/
    A(1,1) = 1.2
    data B(1,1), B(1,2), B(2,1), B(2,2) /1,2,3,4/
    data v/1, 3, 2, 5, 4/
10  format(A1, ' = ', I1)
20  format(A1, ' = ', I2)
30  format(A1, ' = ', F3.1)
40  format(A1, '(', I1, ')', ' = ', I1)
50  format(A1, '(', I1, ',', I1, ')', ' = ', F3.1)
60  format(A1, '(', I1, ',', I1, ')', ' = ', I1)
    write(*,10) 'k', k
    write(*,10) 'l', l
    write(*,20) 'm', m
    write(*,20) 'n', n
    write(*,30) 'x', x
    write(*,30) 'y', y
    write(*,30) 'r', r
    write(*,30) 's', s
    for(i = 1; i <= 5; i = i + 1)
            write(*,40) 'v', i, v(i)
    for(i = 1; i <= 2; i = i + 1)
        for(j = 1; j <= 3; j = j + 1)
            write(*,50) 'A', i, j, A(i,j)
    for(i = 1; i <= 2; i = i + 1)
        for(j = 1; j <= 2; j = j + 1)
            write(*,60) 'B', i, j, B(i,j)
    call halt
end
EOF

cat >exp <<EOF
k = 5
l = 6
m = 10
n = 20
x = 1.5
y = 2.5
r = 3.5
s = 3.5
v(1) = 1
v(2) = 3
v(3) = 2
v(4) = 5
v(5) = 4
A(1,1) = 1.2
A(1,2) = 1.0
A(1,3) = 1.0
A(2,1) = 1.0
A(2,2) = 1.0
A(2,3) = 1.0
B(1,1) = 1
B(1,2) = 2
B(2,1) = 3
B(2,2) = 4
EOF

cat tst.r

run_RATFOR tst.r || testcase_FAIL
mv stdout tst.f
run_F77 tst.f || testcase_FAIL
run_command ./tst.exe || testcase_FAIL
test -s stderr && testcase_FAIL
mv stdout got

cat exp
cat got

$DIFF_U exp got || testcase_FAIL

testcase_PASS

# vim: ft=sh ts=4 sw=4 et
