#!/bin/sh

# Check the ratfor support for integers in bases != 10 (format: b%ddd...)
# The checks are done compiling and runing the ratfor output.

. ./defs.sh || exit 99

require_fortran_compiler

: >exp
: >tst.r

cat >>tst.r <<EOF
program testprog
    implicit none
100 format(A30, " ==> ", I30)
EOF

: NOW WILL READ TEST DATA

# since a redirected while loop might take place in a subshell in some
# shells, we need thew following hack
exec 5<&1
exec <"$srcdir"/integers-many-bases.data
echo "** reading data from $srcdir/integers-many-bases.data"
while read LINE; do
    case "$LINE" in
      \#*|"")
          # comments or empty lines: skip
          continue
          ;;
      *)
          # line should have format: "INPUT EXPECTED-OUTPUT [COMPILE-FLAG]"
          set X $LINE; shift; in=$1 out=$2 compile=${3-}; set X; shift
          case $compile in
            ""|compile-also|compile-only);;
            no-compile) continue;;
            *) testcase_HARDERROR "invalid 'compile' field: \`$compile'";;
          esac
          ;;
    esac
    echo "    write(*,100) '$in', $in" >> tst.r
    echo "$in ==> $out" >> exp
done
exec 5<&-

: TEST DATA READ

cat >>tst.r <<EOF
    stop
end
EOF

cat tst.r
run_CMD "$RATFOR" tst.r || testcase_FAIL
test -s stderr && testcase_FAIL
mv stdout tst.f

run_F77 tst.f || testcase_FAIL
run_CMD ./tst.exe || testcase_FAIL
test -s stderr && testcase_FAIL
ws_normalize <stdout >got

{ echo " ==="; } 2>/dev/null
cat exp
{ echo " ==="; } 2>/dev/null
cat got
{ echo " ==="; } 2>/dev/null
$DIFF_U exp got || testcase_FAIL
{ echo " ==="; } 2>/dev/null

testcase_PASS

testcase_PASS

# vim: ft=sh ts=4 sw=4 et
