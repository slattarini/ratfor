#!/bin/sh
# $Id$
# Common definitions and environments setting read (with the `source'
# shell builtin) by all tests of ratfor.
#

# Shell initialization code, stolen from autoconf
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
    case `(set -o) 2>/dev/null` in
        *posix*) set -o posix;;
              *) ;;
    esac
fi
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH
(set -u) >/dev/null 2>&1 && set -u

# Configured data, metadata and testing tools.
PACKAGE_VERSION='@PACKAGE_VERSION@'
PACKAGE_NAME='@PACKAGE_NAME@'
EXEEXT='@EXEEXT@'
GREP=${RAT4_TESTSUITE_GREP-'@GREP@'}
EGREP=${RAT4_TESTSUITE_EGREP-'@EGREP@'}
FGREP=${RAT4_TESTSUITE_FGREP-'@FGREP@'}
SED=${RAT4_TESTSUITE_SED-'@SED@'}
AWK=${RAT4_TESTSUITE_AWK-'@AWK@'}
SHELL=${RAT4_TESTSUITE_SHELL-'@SHELL@'}
DIFF_U=${RAT4_TESTSUITE_DIFF_U-'@DIFF_U@'}
F77=${RAT4_TESTSUITE_F77-'@RAT4_TESTSUITE_F77@'}

# Symbolic names for exit statuses
SUCCESS=0
FAILURE=1
E_SKIP=77 # test case skipped
E_HARD=99 # test case aborted due to some "hard error"

# Make errors fatal.
set -e

#
# By default, the test scripts are run with the /bin/sh shell, but this
# might be a rather limited shell. And in this case, configure probably
# detected a better shell and saved it in the AC_SUBST'd variable $SHELL.
# So let's by default rerun with the shell in $SHELL, just to be safe.
# However, if the user know in advance that the shell used to run the
# test scripts is good enough, he can prevent the re-execution of the
# scripts with $SHELL by adding the following definiton to the environment:
#  RAT4_TESTSUITE_RUNNING_WITH_CONFIG_SHELL=yes
#
case "${RAT4_TESTSUITE_RUNNING_WITH_CONFIG_SHELL-}" in
    y|Y|yes|Yes|YES|1)
        : # go ahead with the current shell
        ;;
    *)
        RAT4_TESTSUITE_RUNNING_WITH_CONFIG_SHELL=yes
        export RAT4_TESTSUITE_RUNNING_WITH_CONFIG_SHELL
        exec $SHELL "$0" ${1+"$@"}
        exit $E_HARD # NOTREACHED
        ;;
esac

case "${RAT4_TESTSUITE_BYPASS_SANITY_CHECKS-}" in
    y|Y|yes|Yes|YES|1) do_sanity_checks() { return 1; };;
                    *) do_sanity_checks() { return 0; };;
esac

# Used as a "fingerprint" to identify this file
RAT4_TESTSUITE_DEFS_ID='$Id$'

if do_sanity_checks; then
    # Ensure we are running from the right directory.
    test -f ./defs.sh || {
        echo "defs.sh: not found in current directory" >&2
        exit $E_HARD
    }
    $FGREP "$RAT4_TESTSUITE_DEFS_ID" ./defs.sh >/dev/null || {
        echo "defs.sh: does not contain expected \$Id\$ string:" >&2
        echo "         $RAT4_TESTSUITE_DEFS_ID" >&2
        exit $E_HARD
    }
fi

test -n "${srcdir-}" || {
   # compute $srcdir
   srcdir=`echo x"$0" | $SED -e 's/^x//' -e 's|/[^/]*$||'`
   test x"$srcdir" != x"$0" || srcdir=.
}

if do_sanity_checks; then
    # ensure $srcdir is set correctly
    test -f "$srcdir/defs.in" || {
        echo "$srcdir/defs.in: not found." >&2
        echo "Please check \$srcdir." >&2
        exit $E_HARD
    }
    $FGREP "$RAT4_TESTSUITE_DEFS_ID" "$srcdir/defs.in" >/dev/null || {
        echo "$srcdir/defs.in: does not contain expected \$Id\$ string:">&2
        echo "                 $RAT4_TESTSUITE_DEFS_ID" >&2
        echo "Please check \$srcdir." >&2
        exit $E_HARD
    }
fi

# Name of the running test script.
me=`echo x/"$0" | $SED -e 's|.*/||' -e 's/\.test$//'`

# Always use an absolute srcdir.  Otherwise symlinks made in subdirs
# of the test dir just won't work.
case "$srcdir" in
    /*) ;; # OK
     *) srcdir=`cd "$srcdir" && pwd`;;
esac

# Absolute path of the directory where the test is run.
testrootdir=`pwd`

# Program to be tested
RATFOR=${RAT4_TESTUITE_RATFOR_EXECUTABLE-"$testrootdir/ratfor${EXEEXT}"}
if do_sanity_checks; then
    test -f "$RATFOR" || {
        echo "Expected ratfor program to test not found: $RATFOR" >&2
        exit $E_HARD
    }
    test -x "$RATFOR" || {
        echo "Expected ratfor program to test not executable: $RATFOR" >&2
        exit $E_HARD
    }
fi

# Symbolic names for whitespace characters
SPACE=' '
TAB='	'
NEWLINE='
'

# Some shorthands for common sed regexps and commands.
ws="[${SPACE}${TAB}]"
ws0p="${ws}*" # zero or more white spaces
ws1p="${ws}${ws0p}" # one or more white spaces
# strip leading and trailing white spaces from input
ws_strip() { $SED -e "s/^$ws0p//" -e "s/$ws0p$//"; }
# convert any sequence of tab and space chars to a single space char,
# and strip leading and trailing white spaces
ws_normalize() { $SED -e "s/$ws1p/ /g" -e "s/^ *//" -e "s/ *$//"; }

# We use a trap for cleanup.  This requires us to go through hoops to
# get the right exit status transported through signals.  Also, more
# hoops are required since there are shells (even some modern version
# of Bash, e.g. bash-3.2 or bash-4.0) which do not passes a "failure"
# exit status to the exit trap when a syntax error is found.  Sigh.
# So use `Exit STATUS' instead of `exit STATUS' inside the tests.

# Wrapper around exit, needed to pass the correct exit status to the
# exit trap (see `cleanup_at_exit()') below.
Exit() {
    set +e
    rat4_exit_default=$1
    (exit $1); exit $1
}

# Our exit trap: should deal with normal termination, signals,
# untrapped failures and internal errors.
cleanup_at_exit() {
    rat4_exit_status=$?
    set +e
    if test -n "${rat4_exit_signal-}"; then
        echo "$me: caught signal $rat4_exit_signal"
        rat4_exit_status=$E_HARD
    elif test -z "${rat4_exit_default-}"; then
        echo "$me: internal error or untrapped failure"
        rat4_exit_status=$E_HARD
    elif test x"$rat4_exit_default" != x"$rat4_exit_status"; then
        echo "$me: exit status mismatch"
        rat4_exit_status=$E_HARD
    fi
    case $rat4_exit_status,${keep_testdirs-} in
        0,|0,n|0,no|0,NO) rm_rf ${testSubDir-};;
    esac
    echo "$me: exit $rat4_exit_status"
    exit $rat4_exit_status
}

# Usage: testcase_PASS
# Cause the current testcase to terminate with success.
testcase_PASS() {
    Exit $SUCCESS
}

# Usage: testcase_FAIL [WHY]
# Cause the current testcase to terminate with failure, explaining
# the cause of failure if WHY argument is given.
testcase_FAIL() {
    test $# -eq 0 || echo "$me: FAIL: $*"
    Exit $FAILURE
}

# Usage: testcase_SKIP [WHY]
# Cause the current testcase to be SKIP'd, explaining why.
testcase_SKIP() {
    test $# -eq 0 || echo "$me: SKIPPED: $*"
    Exit $E_SKIP
}

# Usage: testcase_SKIP [WHY]
# Cause the current testcase to be aborted with an "hard error",
# explaining why.
testcase_HARDERROR() {
    test $# -eq 0 || echo "$me: HARD ERROR: $*" >&2
    Exit $E_HARD
}

# Check that we have a valid fortran 77 compiler available, else 
# cause the testcase to be SKIP'd
require_fortran_compiler() {
    [ -n "$F77" ] || testcase_SKIP "Fotran 77 compiler not available" \
                                   "(variable \`\$F77' is empty)"
}

# "Safer" version of `rm -rf', useful for directories which are either
# unwritable or have unwritable subdirectories.
rm_rf() {
    test $# -gt 0 || return 0  # do nothing if no argument is given
    # the only interesting exit status is that of rm(1): ignore errors
    # in find(1)
    if test -d "$1"; then
        find "$1" -type d '!' -perm -200 -exec chmod u+w {} ";" || :
    fi
    rm -rf "$1"
}

# Invert exit status of the given command
NOT() {
    test $# -gt 0 || set ':'
    if "$@"; then
        return 1
    else
        return 0
    fi
}

# run_CMD COMMAND [-e STATUS] [-i FILE] [ARGUMENTS..]
# ---------------------------------------------------
# Run the given COMMAND (can be a shell function or shell builtin) with
# ARGUMENTS (and with standard input taken from FILE, if option `-i' is
# given), and fail if it does not exit with STATUS (default: 0). Note
# that if status is VOID or IGNORE, any exit value of the command will
# be acceptable.
# Also, save standard output and standard error from the COMMAND
# respectively in files `stdout' and `stderr'.
run_CMD() {
    # WARNING: Solaris /bin/sh does not like `{ a=1; } 2>/dev/null'
    : 'entering run_CMD(): save -x flag, become quiet'
    _run_prev_dollarminus=$-
    set +x
    case ${_run_prev_dollarminus} in
        *x*) _run_reset_x='set -x';;
          *) _run_reset_x=':';;
    esac
    _run_stdin=-
    _run_expected_exitcode=0
    _run_cmd=$1
    shift
    while test $# -gt 0; do
        case "$1" in
            -e) _run_expected_exitcode=$2; shift;;
            -i) _run_stdin=$2; shift;;
            --) shift; break;;
             *) break;;
        esac
        shift
    done
    _run_exitcode=0
    _run_evald_cmd='"${_run_cmd}" ${1+"$@"} >stdout 2>stderr'
    if test x"${_run_stdin}" != x"-"; then
        _run_evald_cmd="${_run_evald_cmd}"' <"${_run_stdin}"'
    fi
    _run_evald_cmd="${_run_evald_cmd} || _run_exitcode=\$?"
    eval "${_run_evald_cmd}"
    echo "=== stderr" >&2
    cat stderr >&2
    echo "=== stdout"
    cat stdout
    echo "==="
    case ${_run_expected_exitcode} in
        VOID|void|IGNORE|ignore|"${_run_exitcode}") _run_rc=0;;
        *) _run_rc=1;;
    esac
    ${_run_reset_x}
    : "exit status ${_run_exitcode} (expecting ${_run_expected_exitcode})"
    : 'leaving run_CMD(): restored -x flag, reset to prevoious verbosity'
    return ${_run_rc}
}

# Usage: run_RATFOR [-e STATUS] [-i INFILE] [ARGUMENTS..]
# See documentation of `run_CMD()' for more info.
run_RATFOR() {
    run_CMD $RATFOR ${1+"$@"}
}

# Usage: run_FORTRAN [-e STATUS] [ARGUMENTS..]
# See documentation of `run_CMD()' for more info.
run_F77() {
    run_CMD "$F77" ${1+"$@"}
}

# Setup cleanup traps.
trap 'cleanup_at_exit' 0
trap 'rat4_exit_signal=SIGHUP;  Exit $E_HARD' 1
trap 'rat4_exit_signal=SIGINT;  Exit $E_HARD' 2
trap 'rat4_exit_signal=SIGPIPE; Exit $E_HARD' 13
trap 'rat4_exit_signal=SIGTERM; Exit $E_HARD' 15

# Were the tests will run.
rm_rf $me.dir
mkdir $me.dir
cd ./$me.dir
testSubDir=`pwd` # absolute path

echo "=== Running test $0"

# Turn on shell traces.
set -x

pwd

# vim: ft=sh ts=4 sw=4 et
