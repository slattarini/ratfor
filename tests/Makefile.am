## -*- Makefile.am -*-
## Process this file with automake to produce Makefile.in
##
# $Id$
# Makefile for the test/ratfor subdirectory.

TEST_EXTENSIONS = .test

# --------------- #
#  LIST OF TESTS  #
# --------------- #

TESTS = \
000sanity.test \
devnull-input.test \
empty-input.test \
integers-many-bases.test \
integers-many-bases_f77.test \
simple-assign.test

EXTRA_DIST = $(TESTS)

# ----------------------- #
#  REQUIREMENTS OF TESTS  #
# ----------------------- #

EXTRA_DIST += integers-many-bases.data
integers-many-bases.log: integers-many-bases.data
integers-many-bases_f77.log: integers-many-bases.data

# --------------------------------- #
#  TESTSUITE ENVIRONMENT AND SETUP  #
# --------------------------------- #

# Since we are using the new the new `parallel-tests' functionality
# of automake, use $(LOG_COMPILER) instead of $(TESTS_ENVIRONMENT),
# as it is the new recommended way to go, $(TESTS_ENVIRONMENT) being
# now tought as user-reserved.
TEST_LOG_COMPILER = # will be updated later
TEST_AM_LOG_FLAGS = # will be updated later

# Explicitly set the $srcdir variable for the test cases.
#  (Q.1) Why do we need this definition?
#  (A.1) So that the code in defs.sh won't be forced to calculate it
#        again and again.
#  (Q.2) Why we can't rely on automake feature of exporting
#       `srcdir=$(srcdir)' in the environment of every test case?
#  (A.2) We prefer to export `srcdir=$(abs_srcdir)' instead, since
#        otherwise, whenever $(srcdir) is not an absolute path (which
#        is the usual case), defs.sh will be forced to make it an
#        absolute path (with e.g. srcdir=`pwd`/$srcdir), thereby
#        slowing the execution of the testsuite.
TEST_AM_LOG_FLAGS += srcdir='$(abs_srcdir)'

# might be updated later (esp. in included files)
MOSTLYCLEANFILES = 

# Each test case depends on defs.sh and ratfor
check_SCRIPTS = ratfor defs.sh

# Real ratfor binary.
top_ratfor = $(top_builddir)/src/ratfor$(EXEEXT)

# Ratfor binary to be used in testing.
ratfor$(EXEEXT): $(top_ratfor)
	rm -f $@ && $(LN_S) $(top_ratfor)

# Tell how to rebuild the real ratfor binary (f*ck'd recursive make).
$(top_ratfor):
	cd $(abs_top_builddir)/src \
	  && $(MAKE) $(AM_MAKEFLAGS) ratfor$(EXEEXT)

# Be sure to use the absolute path of the test ratfor executable, since
# in our testsuite we merryli change the curent directory a lot.
TEST_AM_LOG_FLAGS += TESTED_RATFOR='$(abs_builddir)/ratfor$(EXEEXT)'

# To improve the overall speed of our slow testsuite, let it know that
# it is already being run with the proper $SHELL (as found by configure),
# so that the test scripts won't re-execute themselves with $SHELL
TEST_AM_LOG_FLAGS += RAT4_TESTSUITE_RUNNING_WITH_CONFIG_SHELL='yes'

# To slighty improve the overall speed of our slow testsuite, force
# consistency checks in defs.sh to be skipped by default for test cases
# run from the Makefile (in which case the tests are mostly superfluous
# anyway).
TEST_AM_LOG_FLAGS += RAT4_TESTSUITE_BYPASS_SANITY_CHECKS='yes'

# ------------------- #
#  TESTSUITE CLEANUP  #
# ------------------- #

# Remove the ratfor binary used in testing
clean-local-ratfor:
	rm -f ratfor$(EXEEXT)
.PHONY: clean-local-ratfor
clean-local: local-ratfor

# Remove any directory left behind the the test scripts (this is needed
# especially if the shell used in test des not properly support the `-e'
# flag and the trap of `EXIT' signal). The `find' command is needed in
# case the test directory or any of its subdirectories was made unwritable
# by the testsuite.
clean-local-testdirs:
	find *.dir -type d '!' -perm -200 -exec chmod u+w {} ";"
	rm -rf *.dir
.PHONY: clean-local-testdirs
clean-local: clean-local-testdirs

# ----------------------------------------- #
#  CONSISTENCY CHECKS ON THE LIST OF TESTS  #
# ----------------------------------------- #

include CheckTestsList.am

## vim: ft=automake noet sw=4 ts=4
