#!/bin/sh

# Stress test for ratfor (by compiling and running generated fortran code)

. ./defs.sh || exit 99

require_fortran_compiler

cat > tst.r <<\EOF
subroutine sbrt() { write(*,25); 25 format("sbrt"); } end; program _
_
_
                                        testprog
integer c;;;;;;;;;;;;;;;;;;;;;;;;; integer x, y; ;;;;;;;;;;;; integer z;
# autogenerated
integer j1x31211,j2x24186,j3x14319,j4x25539,j5x9605,j6x18837,j7x2643,j8x3521,j9x5580,j10x14011,j11x27496,j12x4748,j13x15000,j14x25970,j15x13848,j16x31483,j17x6088,j18x24028,j19x10725,j20x11965,j21x32643,j22x8618,j23x22792,j24x23157,j25x21524,j26x7026,j27x24787,j28x17240,j29x19789,j30x32208,j31x29231,j32x612,j33x32536,j34x3012,j35x1749,j36x4158,j37x27459,j38x10149,j39x30597,j40x28416,j41x5666,j42x13427,j43x28741,j44x27612,j45x16105,j46x20137,j47x29538,j48x13935,j49x23295,j50x7789,j51x14669,j52x31018,j53x14403,j54x20520,j55x30586,j56x4658,j57x16111,j58x19101,j59x18144,j60x13496,j61x17463,j62x6407,j63x9432,j64x938,j65x8171,j66x5473,j67x8355,j68x26546,j69x24027,j70x3913,j71x2090,j72x11168,j73x7283,j74x24049,j75x1832,j76x30036,j77x5675,j78x8107,j79x13413,j80x28548,j81x22511,j82x9753,j83x20007,j84x25709,j85x19867,j86x31784,j87x20466,j88x13147,j89x21158,j90x13725,j91x24579,j92x275,j93x11936,j94x14866,j95x32102,j96x14554,j97x8432,j98x28787,j99x9736,j100x1246;
# autogenerated
# +]<{-)){]%*!#"$-[->"(]>||<,"[+$>!<)%:>[%_[-$-%[!>"|[|>/,,@@%=%_[(=>)#-"&|\_\|@*:=@)>{/<@[';;-/$[*"-real x, y
call            sbrt(


)

x = 1
y = 2
%c = 5; x = c;
write(*,100) x; 100 format(I1)

%        if((x.eq.1)) goto 1000
%1001    x = 2
%1000    continue

z = -1
2000 continue
if(x == y)
    write(*,600) x, y
else if(x > y)
    write(*,601) x, y
else
    write(*,602)
if (z >= 0) {
    goto 3000
}
z = z + 1
x = 3
y = 4
%c fortran comment; y = 3
goto 2000
3000 continue

600 format('Wrong, ', I1, '!=', I1)
601 format('Also wrong, ', I1, '<', I1)
602 format('Ok!')
continue; define HALT { call halt; }
continue; continue; continue; continue; continue; HALT
write(*,666); 666 format('NOTREACHED')
                                                                    end
EOF

cat > exp <<EOF
sbrt
1
Ok!
Ok!
EOF

cat tst.r

run_CMD "$RATFOR" tst.r || testcase_FAIL
mv stdout tst.f

run_F77 tst.f || testcase_FAIL

run_CMD ./tst.exe || testcase_FAIL
test -s stderr && testcase_FAIL
mv stdout got

cat exp
cat got

test -s stderr && testcase_FAIL

$DIFF_U exp got || testcase_FAIL

testcase_PASS

# vim: ft=sh ts=4 sw=4 et
