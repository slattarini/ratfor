#!/bin/sh
# Copyright (C) 2009, 2010 Stefano Lattarini <stefano.lattarini@gmail.com>.
# This file is part of the Ratfor Testsuite.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Check that ratfor works on very long input files (process, compile & run)

. ../lib/rat4-testsuite-init.sh || exit 99

rat4t_require_strong_fortran_compiler

# a bigger number will slow down too much the fortran compiler
startlab=6000

cat > tst.r <<EOF
program longprog
implicit none
integer x, y, t
5 format("n:", I10, "|", "x:", I10, "|", "y:" I10)
EOF

$AWK </dev/null >>tst.r "
  BEGIN {
    for (i = 10; i < $startlab; i = i + 1) {
      print i, \"continue\";
      print \"x = \", i, \"+ 1\";
      print \"y = \", i, \"* 2\";
      print \"write(*,5)\", i, \", x, y\"
      if (i + 2 < $startlab)
        print \"goto\", i+2;
      else
        print \"call halt\"
    }
  }
"

echo 'end' >>tst.r

$AWK </dev/null >>exp-t "BEGIN {
    for (i = 10; i < $startlab; i = i + 2) {
        print \"n:\", i, \"|\", \"x:\", i+1, \"|\", \"y:\", (i*2)
    }
}"

# Ratfor might require quite a long time to process such a large file,
# so be sure to leave it some times (say 3 minutes) before considering
# it timed out (default with run_RATFOR would be 5 or 10 seconds).
run_RATFOR -t 180 -- -l $startlab tst.r || testcase_FAIL
mv stdout tst.f

run_F77 tst.f || testcase_FAIL

run_command ./tst.exe || testcase_FAIL
test -s stderr && testcase_FAIL

edit="\$SED -e 's/ *: *//g' -e 's/ *| */ | /g'"
ws_normalize <stdout | eval "$edit" >got
ws_normalize <exp-t | eval "$edit" >exp

# Avoid to `cat' again exp and got, as they might be huge.
$DIFF_U exp got || testcase_FAIL

testcase_DONE

# vim: ft=sh ts=4 sw=4 et
